{
  "address": "0x94Bc2a1C732BcAd7343B25af48385Fe76E08734f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWETH",
          "name": "weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthDepositRejected",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "interactiveData",
          "type": "bytes"
        }
      ],
      "name": "fillOrderPostInteraction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x856dfb5c5a48b9fe56301b7227a0c77cca334056afbfd460e7ac1502c8fe23af",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0x94Bc2a1C732BcAd7343B25af48385Fe76E08734f",
    "transactionIndex": 1,
    "gasUsed": "311452",
    "logsBloom": "0x
    "blockHash": "0xf9657e9cb423632b8a815021005e1b73bfa733eafbd25f4153219cb0b52022e9",
    "transactionHash": "0x856dfb5c5a48b9fe56301b7227a0c77cca334056afbfd460e7ac1502c8fe23af",
    "logs": [],
    "blockNumber": 109973421,
    "cumulativeGasUsed": "942597",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4f05a66ec68b54a58b17c22107b02e0232cc817"
  ],
  "numDeployments": 3,
  "solcInputHash": "ea2aa2e3a46e0e3ca00bcdf2b19d0444",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthDepositRejected\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"interactiveData\",\"type\":\"bytes\"}],\"name\":\"fillOrderPostInteraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helpers/WethUnwrapper.sol\":\"WethUnwrapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/solidity-utils/contracts/EthReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nabstract contract EthReceiver {\\n    error EthDepositRejected();\\n\\n    receive() external payable {\\n        _receive();\\n    }\\n\\n    function _receive() internal virtual {\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin) revert EthDepositRejected();\\n    }\\n}\\n\",\"keccak256\":\"0xe95cfda214f2d9452eda92fbe9e1f6ab87ce66892f95f0731c90b0171c83bc4f\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/OnlyWethReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"./EthReceiver.sol\\\";\\n\\nabstract contract OnlyWethReceiver is EthReceiver {\\n    address private immutable _WETH; // solhint-disable-line var-name-mixedcase\\n\\n    constructor(address weth) {\\n        _WETH = address(weth);\\n    }\\n\\n    function _receive() internal virtual override {\\n        if (msg.sender != _WETH) revert EthDepositRejected();\\n    }\\n}\\n\",\"keccak256\":\"0x7fcf027e1ecaf1b394a783e562f2bbcc653de507e28f7463dc72c4ba022e0e91\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xa63626fa2564ae99f9a9a8dc4f163583882f5ab1a96610344a57d8fb6207f755\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/helpers/WethUnwrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\nimport \\\"@1inch/solidity-utils/contracts/OnlyWethReceiver.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\\\";\\n\\nimport \\\"../interfaces/IPostInteractionNotificationReceiver.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\ncontract WethUnwrapper is OnlyWethReceiver, IPostInteractionNotificationReceiver {\\n    IWETH private immutable _WETH;  // solhint-disable-line var-name-mixedcase\\n\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n\\n    constructor(IWETH weth) OnlyWethReceiver(address(weth)) {\\n        _WETH = weth;\\n    }\\n\\n    function fillOrderPostInteraction(\\n        bytes32 /* orderHash */,\\n        address maker,\\n        address /* taker */,\\n        uint256 /* makingAmount */,\\n        uint256 takingAmount,\\n        uint256 /* remainingMakerAmount */,\\n        bytes calldata interactiveData\\n    ) external override {\\n        _WETH.withdraw(takingAmount);\\n        address receiver = maker;\\n        if (interactiveData.length == 20) {\\n            receiver = address(bytes20(interactiveData));\\n        }\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = receiver.call{value: takingAmount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n        if (!success) revert Errors.ETHTransferFailed();\\n    }\\n}\\n\",\"keccak256\":\"0x21d477d7298bda91fef93938e443855347d9dc8b85f42c37bc2c8337081449f2\",\"license\":\"MIT\"},\"contracts/interfaces/IPostInteractionNotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\n/**\\n * @title Interface for interactor which acts after `taker -> maker` transfers.\\n * @notice The order filling steps are `preInteraction` =>` Transfer \\\"maker -> taker\\\"` => `Interaction` => `Transfer \\\"taker -> maker\\\"` => **`postInteraction`**\\n */\\ninterface IPostInteractionNotificationReceiver {\\n    /**\\n     * @notice Callback method that gets called after all funds transfers\\n     * @param orderHash Hash of the order being processed\\n     * @param maker Maker address\\n     * @param taker Taker address\\n     * @param makingAmount Actual making amount\\n     * @param takingAmount Actual taking amount\\n     * @param remainingAmount Limit order remaining maker amount after the swap\\n     * @param interactionData Interaction calldata\\n     */\\n    function fillOrderPostInteraction(\\n        bytes32 orderHash,\\n        address maker,\\n        address taker,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        uint256 remainingAmount,\\n        bytes memory interactionData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc406664dc4cd359817212aa6ea662130dcc89f4c8989017cf449e55eb6670362\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    error InvalidMsgValue();\\n    error ETHTransferFailed();\\n}\\n\",\"keccak256\":\"0x10a5dec1fc873af5512777d873c95099fc029de3b40c38f2c9df28194f2c81d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516103973803806103978339818101604052602081101561003357600080fd5b50516001600160a01b0316608081905260a08190528061032f610068600039600061016401526000610109015261032f6000f3fe6080604052600436106100225760003560e01c80633504ed621461003657600080fd5b366100315761002f6100f1565b005b600080fd5b34801561004257600080fd5b5061002f600480360360e081101561005957600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff602082013581169260408301359091169160608101359160808201359160a08101359181019060e0810160c08201356401000000008111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111640100000000831117156100e657600080fd5b509092509050610162565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610160576040517f1b10b0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b50899250505060148290036102085761020282846102b1565b60601c90505b60405160009073ffffffffffffffffffffffffffffffffffffffff83169061138890889084818181858888f193505050503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102a5576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156102f15780818660140360031b1b83161692505b50509291505056fea26469706673582212202796b400597a988afcb28ecf5f83180939b37ba2ef7b6c2f72bdab5c034bbf6d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100225760003560e01c80633504ed621461003657600080fd5b366100315761002f6100f1565b005b600080fd5b34801561004257600080fd5b5061002f600480360360e081101561005957600080fd5b81359173ffffffffffffffffffffffffffffffffffffffff602082013581169260408301359091169160608101359160808201359160a08101359181019060e0810160c08201356401000000008111156100b257600080fd5b8201836020820111156100c457600080fd5b803590602001918460018302840111640100000000831117156100e657600080fd5b509092509050610162565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610160576040517f1b10b0f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156101d557600080fd5b505af11580156101e9573d6000803e3d6000fd5b50899250505060148290036102085761020282846102b1565b60601c90505b60405160009073ffffffffffffffffffffffffffffffffffffffff83169061138890889084818181858888f193505050503d8060008114610265576040519150601f19603f3d011682016040523d82523d6000602084013e61026a565b606091505b50509050806102a5576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156102f15780818660140360031b1b83161692505b50509291505056fea26469706673582212202796b400597a988afcb28ecf5f83180939b37ba2ef7b6c2f72bdab5c034bbf6d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}