{
  "address": "0xF55684BC536487394B423e70567413faB8e45E26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVotable",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "resolverPercentageThreshold_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BalanceLessThanThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutputArrayTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PopFromEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SamePromotee",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "promoter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "promotee",
          "type": "address"
        }
      ],
      "name": "Promotion",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Registered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "resolverPercentageThreshold",
          "type": "uint256"
        }
      ],
      "name": "ResolverPercentageThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Unregistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clean",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "getPromotees",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "promotees",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "promotee",
          "type": "address"
        }
      ],
      "name": "promote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "promotions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolverPercentageThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "resolverPercentageThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setResolverPercentageThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IVotable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52f0728fad778a12d63e0d92ae510c2307d7a7612864a3579c8cb8014d735d80",
  "receipt": {
    "to": null,
    "from": "0x9ceef06f7042D6FF7F7F0EE4BbCa41E4B0989A0b",
    "contractAddress": "0xF55684BC536487394B423e70567413faB8e45E26",
    "transactionIndex": 103,
    "gasUsed": "1167070",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000040000000000c00000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000008000000000000040000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000020000000000000000000040000000000000000000000000001000000400000000000",
    "blockHash": "0x5e5a465cfeae570820fac8a5447f76cdbb6b561a1dbfa715b6df5480e0247d7b",
    "transactionHash": "0x52f0728fad778a12d63e0d92ae510c2307d7a7612864a3579c8cb8014d735d80",
    "logs": [
      {
        "transactionIndex": 103,
        "blockNumber": 17765012,
        "transactionHash": "0x52f0728fad778a12d63e0d92ae510c2307d7a7612864a3579c8cb8014d735d80",
        "address": "0xF55684BC536487394B423e70567413faB8e45E26",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009ceef06f7042d6ff7f7f0ee4bbca41e4b0989a0b"
        ],
        "data": "0x",
        "logIndex": 229,
        "blockHash": "0x5e5a465cfeae570820fac8a5447f76cdbb6b561a1dbfa715b6df5480e0247d7b"
      },
      {
        "transactionIndex": 103,
        "blockNumber": 17765012,
        "transactionHash": "0x52f0728fad778a12d63e0d92ae510c2307d7a7612864a3579c8cb8014d735d80",
        "address": "0xF55684BC536487394B423e70567413faB8e45E26",
        "topics": [
          "0xcbcd22f10b3a748cd1a2d091ce0b2108352aa00351115f173e159e24d97d280e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 230,
        "blockHash": "0x5e5a465cfeae570820fac8a5447f76cdbb6b561a1dbfa715b6df5480e0247d7b"
      }
    ],
    "blockNumber": 17765012,
    "cumulativeGasUsed": "10464494",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAccfAc2339e16DC80c50d2fa81b5c2B049B4f947",
    "1000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ea04810f406bb6f3d5088c06db1e2354",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVotable\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"resolverPercentageThreshold_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BalanceLessThanThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutputArrayTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PopFromEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SamePromotee\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"promotee\",\"type\":\"address\"}],\"name\":\"Promotion\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Registered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resolverPercentageThreshold\",\"type\":\"uint256\"}],\"name\":\"ResolverPercentageThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unregistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clean\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getPromotees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"promotees\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"promotee\",\"type\":\"address\"}],\"name\":\"promote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"promotions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolverPercentageThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"resolverPercentageThreshold_\",\"type\":\"uint256\"}],\"name\":\"setResolverPercentageThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IVotable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getPromotees(uint256)\":{\"params\":{\"chainId\":\"The chain ID to get the promoted addresses for.\"},\"returns\":{\"promotees\":\"A list of worker addresses.\"}},\"getWhitelist()\":{\"returns\":{\"_0\":\"whitelist A list of whitelisted addresses.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"promote(uint256,address)\":{\"params\":{\"chainId\":\"The chain ID where the worker will assigned.\",\"promotee\":\"The worker's address.\"}},\"register()\":{\"details\":\"Reverts if the caller's total supply percentage is below the resolver threshold.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueFunds(address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to recover.\",\"token_\":\"The token to recover.\"}},\"setResolverPercentageThreshold(uint256)\":{\"params\":{\"resolverPercentageThreshold_\":\"The new resolver threshold.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"WhitelistRegistry\",\"version\":1},\"userdoc\":{\"events\":{\"Promotion(address,uint256,address)\":{\"notice\":\"Emitted when a new worker for a resolver is set.\"},\"Registered(address)\":{\"notice\":\"Emitted after a new resolver is registered.\"},\"ResolverPercentageThresholdSet(uint256)\":{\"notice\":\"Emitted when the new minimum total supply percentage to get into the whitelist is set.\"},\"Unregistered(address)\":{\"notice\":\"Emitted when a resolver is pushed out of whitelist.\"}},\"kind\":\"user\",\"methods\":{\"clean()\":{\"notice\":\"Cleans the whitelist by removing addresses that fall below the resolver threshold.\"},\"getPromotees(uint256)\":{\"notice\":\"Returns the worker list for a particular chain ID.\"},\"getWhitelist()\":{\"notice\":\"Returns the addresses in the whitelist.\"},\"promote(uint256,address)\":{\"notice\":\"Registers a worker for the resolver to settle orders.\"},\"register()\":{\"notice\":\"Attempts to register the caller in the whitelist.\"},\"rescueFunds(address,uint256)\":{\"notice\":\"Allows the contract owner to recover any tokens accidentally sent to the contract.\"},\"setResolverPercentageThreshold(uint256)\":{\"notice\":\"Allows the contract owner to set a new resolver threshold. The resolver threshold is the minimum total supply percentage required to get into the whitelist.\"}},\"notice\":\"The contract manages a whitelist for trading resolvers, providing functions to register, promote and remove addresses, as well as setting various thresholds and limits. It also includes an emergency rescue function for tokens sent to the contract accidentally.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WhitelistRegistry.sol\":\"WhitelistRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbbb219886412a339a7f84b0850f700311dd2b3a106919ae54fa0a215d847a3b2\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IERC20MetadataUppercase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC20MetadataUppercase {\\n    function NAME() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n\\n    function SYMBOL() external view returns (string memory); // solhint-disable-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x42e8625b32dfa9746df2b79c66deb1cb6f085d8292a0e19f60339ce9dd7e9803\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPermit2 {\\n    struct PermitDetails {\\n        // ERC20 token address\\n        address token;\\n        // the maximum amount allowed to spend\\n        uint160 amount;\\n        // timestamp at which a spender's token allowances become invalid\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n    /// @notice The permit message signed for a single token allownce\\n    struct PermitSingle {\\n        // the permit data for a single token alownce\\n        PermitDetails details;\\n        // address permissioned on the allowed tokens\\n        address spender;\\n        // deadline on the permit signature\\n        uint256 sigDeadline;\\n    }\\n    /// @notice Packed allowance\\n    struct PackedAllowance {\\n        // amount allowed\\n        uint160 amount;\\n        // permission expiry\\n        uint48 expiration;\\n        // an incrementing value indexed per owner,token,and spender for each signature\\n        uint48 nonce;\\n    }\\n\\n    function transferFrom(address user, address spender, uint160 amount, address token) external;\\n\\n    function permit(address owner, PermitSingle memory permitSingle, bytes calldata signature) external;\\n\\n    function allowance(address user, address token, address spender) external view returns (PackedAllowance memory);\\n}\\n\",\"keccak256\":\"0x63209a082f66ecb584b86e412b3dd0010e9675bc19bc1f80a75437311df7ec11\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x048a69d5bb1238cafcc67dbda5a530dcd9236e6e8c963765089655b85cb0fc7a\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Library that implements address array on mapping, stores array length at 0 index.\\nlibrary AddressArray {\\n    error IndexOutOfBounds();\\n    error PopFromEmptyArray();\\n    error OutputArrayTooSmall();\\n\\n    /// @dev Data struct containing raw mapping.\\n    struct Data {\\n        mapping(uint256 => uint256) _raw;\\n    }\\n\\n    /// @dev Length of array.\\n    function length(Data storage self) internal view returns (uint256) {\\n        return self._raw[0] >> 160;\\n    }\\n\\n    /// @dev Returns data item from `self` storage at `i`.\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        return address(uint160(self._raw[i]));\\n    }\\n\\n    /// @dev Returns list of addresses from storage `self`.\\n    function get(Data storage self) internal view returns (address[] memory arr) {\\n        uint256 lengthAndFirst = self._raw[0];\\n        arr = new address[](lengthAndFirst >> 160);\\n        _get(self, arr, lengthAndFirst);\\n    }\\n\\n    /// @dev Puts list of addresses from `self` storage into `output` array.\\n    function get(Data storage self, address[] memory output) internal view returns (address[] memory) {\\n        return _get(self, output, self._raw[0]);\\n    }\\n\\n    function _get(\\n        Data storage self,\\n        address[] memory output,\\n        uint256 lengthAndFirst\\n    ) private view returns (address[] memory) {\\n        uint256 len = lengthAndFirst >> 160;\\n        if (len > output.length) revert OutputArrayTooSmall();\\n        if (len > 0) {\\n            output[0] = address(uint160(lengthAndFirst));\\n            unchecked {\\n                for (uint256 i = 1; i < len; i++) {\\n                    output[i] = address(uint160(self._raw[i]));\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    /// @dev Array push back `account` operation on storage `self`.\\n    function push(Data storage self, address account) internal returns (uint256) {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) {\\n                self._raw[0] = (1 << 160) + uint160(account);\\n            } else {\\n                self._raw[0] = lengthAndFirst + (1 << 160);\\n                self._raw[len] = uint160(account);\\n            }\\n            return len + 1;\\n        }\\n    }\\n\\n    /// @dev Array pop back operation for storage `self`.\\n    function pop(Data storage self) internal {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) revert PopFromEmptyArray();\\n            self._raw[len - 1] = 0;\\n            if (len > 1) {\\n                self._raw[0] = lengthAndFirst - (1 << 160);\\n            }\\n        }\\n    }\\n\\n    /// @dev Set element for storage `self` at `index` to `account`.\\n    function set(\\n        Data storage self,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        uint256 len = length(self);\\n        if (index >= len) revert IndexOutOfBounds();\\n\\n        if (index == 0) {\\n            self._raw[0] = (len << 160) | uint160(account);\\n        } else {\\n            self._raw[index] = uint160(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5a40948d30b475081eedecc42f33027a5d5cb03021dba7608595c0414252ec0c\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AddressArray.sol\\\";\\n\\n/** @title Library that is using AddressArray library for AddressArray.Data\\n * and allows Set operations on address storage data:\\n * 1. add\\n * 2. remove\\n * 3. contains\\n */\\nlibrary AddressSet {\\n    using AddressArray for AddressArray.Data;\\n\\n    /** @dev Data struct from AddressArray.Data items\\n     * and lookup mapping address => index in data array.\\n     */\\n    struct Data {\\n        AddressArray.Data items;\\n        mapping(address => uint256) lookup;\\n    }\\n\\n    /// @dev Length of data storage.\\n    function length(Data storage s) internal view returns (uint256) {\\n        return s.items.length();\\n    }\\n\\n    /// @dev Returns data item from `s` storage at `index`.\\n    function at(Data storage s, uint256 index) internal view returns (address) {\\n        return s.items.at(index);\\n    }\\n\\n    /// @dev Returns true if storage `s` has `item`.\\n    function contains(Data storage s, address item) internal view returns (bool) {\\n        return s.lookup[item] != 0;\\n    }\\n\\n    /// @dev Adds `item` into storage `s` and returns true if successful.\\n    function add(Data storage s, address item) internal returns (bool) {\\n        if (s.lookup[item] > 0) {\\n            return false;\\n        }\\n        s.lookup[item] = s.items.push(item);\\n        return true;\\n    }\\n\\n    /// @dev Removes `item` from storage `s` and returns true if successful.\\n    function remove(Data storage s, address item) internal returns (bool) {\\n        uint256 index = s.lookup[item];\\n        if (index == 0) {\\n            return false;\\n        }\\n        if (index < s.items.length()) {\\n            unchecked {\\n                address lastItem = s.items.at(s.items.length() - 1);\\n                s.items.set(index - 1, lastItem);\\n                s.lookup[lastItem] = index;\\n            }\\n        }\\n        s.items.pop();\\n        delete s.lookup[item];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1156b03a2cbd95e0bbf21f22ad8d630a73ec3679b70020dc6d7005bff62c06fd\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x953c4a195ae066e90aac2ccfcef3121e4c5b74f2cf7cb4add341a7df7df2d00e\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../interfaces/IPermit2.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n    error Permit2TransferAmountTooHigh();\\n\\n    address private constant _PERMIT2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n    bytes4 private constant _PERMIT_LENGHT_ERROR = 0x68275857;  // SafePermitBadLength.selector\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFromUniversal(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bool permit2\\n    ) internal {\\n        if (permit2) {\\n            if (amount > type(uint160).max) revert Permit2TransferAmountTooHigh();\\n            safeTransferFromPermit2(token, from, to, uint160(amount));\\n        } else {\\n            safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Permit2 version of safeTransferFrom above.\\n    function safeTransferFromPermit2(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint160 amount\\n    ) internal {\\n        bytes4 selector = IPermit2.transferFrom.selector;\\n        bool success;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            mstore(add(data, 0x64), token)\\n            success := call(gas(), _PERMIT2, 0, data, 0x84, 0x0, 0x0)\\n            if success {\\n                success := gt(extcodesize(_PERMIT2), 0)\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, msg.sender, address(this), permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function safePermit(IERC20 token, address owner, address spender, bytes calldata permit) internal {\\n        if (!tryPermit(token, owner, spender, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool success) {\\n        return tryPermit(token, msg.sender, address(this), permit);\\n    }\\n\\n    function tryPermit(IERC20 token, address owner, address spender, bytes calldata permit) internal returns(bool success) {\\n        bytes4 permitSelector = IERC20Permit.permit.selector;\\n        bytes4 daiPermitSelector = IDaiLikePermit.permit.selector;\\n        bytes4 permit2Selector = IPermit2.permit.selector;\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            switch permit.length\\n            case 100 {\\n                mstore(ptr, permitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IERC20Permit.permit(uint256 value, uint32 deadline, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let deadline := shr(224, calldataload(add(permit.offset, 0x20)))\\n                    let vs := calldataload(add(permit.offset, 0x44))\\n\\n                    calldatacopy(add(ptr, 0x44), permit.offset, 0x20) // value\\n                    mstore(add(ptr, 0x64), sub(deadline, 1))\\n                    mstore(add(ptr, 0x84), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xa4), add(permit.offset, 0x24), 0x20) // r\\n                    mstore(add(ptr, 0xc4), shr(1, shl(1, vs)))\\n                }\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 72 {\\n                mstore(ptr, daiPermitSelector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), spender)\\n\\n                // Compact IDaiLikePermit.permit(uint32 nonce, uint32 expiry, uint256 r, uint256 vs)\\n                {  // stack too deep\\n                    let expiry := shr(224, calldataload(add(permit.offset, 0x04)))\\n                    let vs := calldataload(add(permit.offset, 0x28))\\n\\n                    mstore(add(ptr, 0x44), shr(224, calldataload(permit.offset)))\\n                    mstore(add(ptr, 0x64), sub(expiry, 1))\\n                    mstore(add(ptr, 0x84), true)\\n                    mstore(add(ptr, 0xa4), add(27, shr(255, vs)))\\n                    calldatacopy(add(ptr, 0xc4), add(permit.offset, 0x08), 0x20) // r\\n                    mstore(add(ptr, 0xe4), shr(1, shl(1, vs)))\\n                }\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 224 {\\n                mstore(ptr, permitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IERC20Permit.permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0xe4, 0, 0)\\n            }\\n            case 256 {\\n                mstore(ptr, daiPermitSelector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IDaiLikePermit.permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s)\\n                success := call(gas(), token, 0, ptr, 0x104, 0, 0)\\n            }\\n            case 96 {\\n                // Compact IPermit2.permit(uint160 amount, uint32 expiration, uint32 nonce, uint32 sigDeadline, uint256 r, uint256 vs)\\n                mstore(ptr, permit2Selector)\\n                mstore(add(ptr, 0x04), owner)\\n                mstore(add(ptr, 0x24), token)\\n                calldatacopy(add(ptr, 0x50), permit.offset, 0x14) // amount\\n                mstore(add(ptr, 0x64), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x14))), 1))) // expiration\\n                mstore(add(ptr, 0x84), shr(224, calldataload(add(permit.offset, 0x18)))) // nonce\\n                mstore(add(ptr, 0xa4), spender)\\n                mstore(add(ptr, 0xc4), and(0xffffffffffff, sub(shr(224, calldataload(add(permit.offset, 0x1c))), 1))) // sigDeadline\\n                mstore(add(ptr, 0xe4), 0x100)\\n                mstore(add(ptr, 0x104), 0x40)\\n                calldatacopy(add(ptr, 0x124), add(permit.offset, 0x20), 0x20) // r\\n                calldatacopy(add(ptr, 0x144), add(permit.offset, 0x40), 0x20) // vs\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            case 352 {\\n                mstore(ptr, permit2Selector)\\n                calldatacopy(add(ptr, 0x04), permit.offset, permit.length)\\n                // IPermit2.permit(address owner, PermitSingle calldata permitSingle, bytes calldata signature)\\n                success := call(gas(), _PERMIT2, 0, ptr, 0x164, 0, 0)\\n            }\\n            default {\\n                mstore(ptr, _PERMIT_LENGHT_ERROR)\\n                revert(ptr, 4)\\n            }\\n        }\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeDeposit(IWETH weth, uint256 amount) internal {\\n        if (amount > 0) {\\n            bytes4 selector = IWETH.deposit.selector;\\n            assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                mstore(0, selector)\\n                if iszero(call(gas(), weth, amount, 0, 4, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n\\n    function safeWithdraw(IWETH weth, uint256 amount) internal {\\n        bytes4 selector = IWETH.withdraw.selector;\\n        assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n            mstore(0, selector)\\n            mstore(4, amount)\\n            if iszero(call(gas(), weth, 0, 0, 0x24, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function safeWithdrawTo(IWETH weth, uint256 amount, address to) internal {\\n        safeWithdraw(weth, amount);\\n        if (to != address(this)) {\\n            assembly (\\\"memory-safe\\\") {  // solhint-disable-line no-inline-assembly\\n                if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                    returndatacopy(0, 0, returndatasize())\\n                    revert(0, returndatasize())\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88ab8e02b78289cd296677e52a4fe88f0632d4a3449602a99fbd974a6ad43aa3\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/StringUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title Library with gas-efficient string operations\\nlibrary StringUtil {\\n    function toHex(uint256 value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    function toHex(address value) internal pure returns (string memory) {\\n        return toHex(abi.encodePacked(value));\\n    }\\n\\n    /// @dev this is the assembly adaptation of highly optimized toHex16 code from Mikhail Vladimirov\\n    /// https://stackoverflow.com/a/69266989\\n    function toHex(bytes memory data) internal pure returns (string memory result) {\\n        assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            function _toHex16(input) -> output {\\n                output := or(\\n                    and(input, 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000),\\n                    shr(64, and(input, 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000),\\n                    shr(32, and(output, 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000))\\n                )\\n                output := or(\\n                    and(output, 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000),\\n                    shr(16, and(output, 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000))\\n                )\\n                output := or(\\n                    and(output, 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000),\\n                    shr(8, and(output, 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000))\\n                )\\n                output := or(\\n                    shr(4, and(output, 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000)),\\n                    shr(8, and(output, 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00))\\n                )\\n                output := add(\\n                    add(0x3030303030303030303030303030303030303030303030303030303030303030, output),\\n                    mul(\\n                        and(\\n                            shr(4, add(output, 0x0606060606060606060606060606060606060606060606060606060606060606)),\\n                            0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\\n                        ),\\n                        7 // Change 7 to 39 for lower case output\\n                    )\\n                )\\n            }\\n\\n            result := mload(0x40)\\n            let length := mload(data)\\n            let resultLength := shl(1, length)\\n            let toPtr := add(result, 0x22) // 32 bytes for length + 2 bytes for '0x'\\n            mstore(0x40, add(toPtr, resultLength)) // move free memory pointer\\n            mstore(add(result, 2), 0x3078) // 0x3078 is right aligned so we write to `result + 2`\\n            // to store the last 2 bytes in the beginning of the string\\n            mstore(result, add(resultLength, 2)) // extra 2 bytes for '0x'\\n\\n            for {\\n                let fromPtr := add(data, 0x20)\\n                let endPtr := add(fromPtr, length)\\n            } lt(fromPtr, endPtr) {\\n                fromPtr := add(fromPtr, 0x20)\\n            } {\\n                let rawData := mload(fromPtr)\\n                let hexData := _toHex16(rawData)\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n                hexData := _toHex16(shl(128, rawData))\\n                mstore(toPtr, hexData)\\n                toPtr := add(toPtr, 0x20)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x47867f007afaefa24c40fe487b968f553f4551c941dfa53afe8cc29e1fb68f38\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/UniERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IERC20MetadataUppercase.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"./StringUtil.sol\\\";\\n\\n/// @title Library, which allows usage of ETH as ERC20 and ERC20 itself. Uses SafeERC20 library for ERC20 interface.\\nlibrary UniERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    error InsufficientBalance();\\n    error ApproveCalledOnETH();\\n    error NotEnoughValue();\\n    error FromIsNotSender();\\n    error ToIsNotThis();\\n    error ETHTransferFailed();\\n\\n    uint256 private constant _RAW_CALL_GAS_LIMIT = 5000;\\n    IERC20 private constant _ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n    IERC20 private constant _ZERO_ADDRESS = IERC20(address(0));\\n\\n    /// @dev Returns true if `token` is ETH.\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return (token == _ZERO_ADDRESS || token == _ETH_ADDRESS);\\n    }\\n\\n    /// @dev Returns `account` ERC20 `token` balance.\\n    function uniBalanceOf(IERC20 token, address account) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return account.balance;\\n        } else {\\n            return token.balanceOf(account);\\n        }\\n    }\\n\\n    /// @dev `token` transfer `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransfer(\\n        IERC20 token,\\n        address payable to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (address(this).balance < amount) revert InsufficientBalance();\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (bool success, ) = to.call{value: amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                if (!success) revert ETHTransferFailed();\\n            } else {\\n                token.safeTransfer(to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev `token` transfer `from` `to` `amount`.\\n    /// Note that this function does nothing in case of zero amount.\\n    function uniTransferFrom(\\n        IERC20 token,\\n        address payable from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount > 0) {\\n            if (isETH(token)) {\\n                if (msg.value < amount) revert NotEnoughValue();\\n                if (from != msg.sender) revert FromIsNotSender();\\n                if (to != address(this)) revert ToIsNotThis();\\n                if (msg.value > amount) {\\n                    // Return remainder if exist\\n                    unchecked {\\n                        // solhint-disable-next-line avoid-low-level-calls\\n                        (bool success, ) = from.call{value: msg.value - amount, gas: _RAW_CALL_GAS_LIMIT}(\\\"\\\");\\n                        if (!success) revert ETHTransferFailed();\\n                    }\\n                }\\n            } else {\\n                token.safeTransferFrom(from, to, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `token` symbol from ERC20 metadata.\\n    function uniSymbol(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.symbol.selector, IERC20MetadataUppercase.SYMBOL.selector);\\n    }\\n\\n    /// @dev Returns `token` name from ERC20 metadata.\\n    function uniName(IERC20 token) internal view returns (string memory) {\\n        return _uniDecode(token, IERC20Metadata.name.selector, IERC20MetadataUppercase.NAME.selector);\\n    }\\n\\n    /// @dev Reverts if `token` is ETH, otherwise performs ERC20 forceApprove.\\n    function uniApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (isETH(token)) revert ApproveCalledOnETH();\\n\\n        token.forceApprove(to, amount);\\n    }\\n\\n    /// @dev 20K gas is provided to account for possible implementations of name/symbol\\n    /// (token implementation might be behind proxy or store the value in storage)\\n    function _uniDecode(\\n        IERC20 token,\\n        bytes4 lowerCaseSelector,\\n        bytes4 upperCaseSelector\\n    ) private view returns (string memory result) {\\n        if (isETH(token)) {\\n            return \\\"ETH\\\";\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 20000}(\\n            abi.encodeWithSelector(lowerCaseSelector)\\n        );\\n        if (!success) {\\n            (success, data) = address(token).staticcall{gas: 20000}(abi.encodeWithSelector(upperCaseSelector));\\n        }\\n\\n        if (success && data.length >= 0x40) {\\n            (uint256 offset, uint256 len) = abi.decode(data, (uint256, uint256));\\n            /*\\n                return data is padded up to 32 bytes with ABI encoder also sometimes\\n                there is extra 32 bytes of zeros padded in the end:\\n                https://github.com/ethereum/solidity/issues/10170\\n                because of that we can't check for equality and instead check\\n                that overall data length is greater or equal than string length + extra 64 bytes\\n            */\\n            if (offset == 0x20 && data.length >= 0x40 + len) {\\n                assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                    result := add(data, 0x40)\\n                }\\n                return result;\\n            }\\n        }\\n        if (success && data.length == 32) {\\n            uint256 len = 0;\\n            while (len < data.length && data[len] >= 0x20 && data[len] <= 0x7E) {\\n                unchecked {\\n                    len++;\\n                }\\n            }\\n\\n            if (len > 0) {\\n                assembly (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                    mstore(data, len)\\n                }\\n                return string(data);\\n            }\\n        }\\n\\n        return StringUtil.toHex(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x17a81163027008404f1446b8db47970855cae660a18d1d0d908faaef641cc97b\",\"license\":\"MIT\"},\"@1inch/st1inch/contracts/interfaces/IVotable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x13ddc368941b654d57802fe303f07ce344c6112ff5f4eefc0e63b9c628601887\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/WhitelistRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@1inch/solidity-utils/contracts/libraries/UniERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\nimport \\\"@1inch/st1inch/contracts/interfaces/IVotable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title WhitelistRegistry\\n * @notice The contract manages a whitelist for trading resolvers, providing functions to register,\\n * promote and remove addresses, as well as setting various thresholds and limits. It also includes an\\n * emergency rescue function for tokens sent to the contract accidentally.\\n */\\ncontract WhitelistRegistry is Ownable {\\n    using UniERC20 for IERC20;\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n\\n    error BalanceLessThanThreshold();\\n    error AlreadyRegistered();\\n    error NotWhitelisted();\\n    error SamePromotee();\\n\\n    /// @notice Emitted after a new resolver is registered.\\n    event Registered(address addr);\\n    /// @notice Emitted when a resolver is pushed out of whitelist.\\n    event Unregistered(address addr);\\n    /// @notice Emitted when the new minimum total supply percentage to get into the whitelist is set.\\n    event ResolverPercentageThresholdSet(uint256 resolverPercentageThreshold);\\n    /// @notice Emitted when a new worker for a resolver is set.\\n    event Promotion(address promoter, uint256 chainId, address promotee);\\n\\n    uint256 public constant BASIS_POINTS = 10000;\\n    IVotable public immutable token;\\n\\n    mapping(address => mapping(uint256 => address)) public promotions;\\n    // 100% = 10000, 10% = 1000, 1% = 100\\n    uint256 public resolverPercentageThreshold;\\n\\n    AddressSet.Data private _whitelist;\\n\\n    constructor(\\n        IVotable token_,\\n        uint256 resolverPercentageThreshold_\\n    ) {\\n        token = token_;\\n        _setResolverPercentageThreshold(resolverPercentageThreshold_);\\n    }\\n\\n    /**\\n     * @notice Allows the contract owner to recover any tokens accidentally sent to the contract.\\n     * @param token_ The token to recover.\\n     * @param amount The amount of tokens to recover.\\n     */\\n    function rescueFunds(IERC20 token_, uint256 amount) external onlyOwner {\\n        token_.uniTransfer(payable(msg.sender), amount);\\n    }\\n\\n    /**\\n     * @notice Allows the contract owner to set a new resolver threshold.\\n     * The resolver threshold is the minimum total supply percentage required to get into the whitelist.\\n     * @param resolverPercentageThreshold_ The new resolver threshold.\\n     */\\n    function setResolverPercentageThreshold(uint256 resolverPercentageThreshold_) external onlyOwner {\\n        _setResolverPercentageThreshold(resolverPercentageThreshold_);\\n    }\\n\\n\\n    /**\\n     * @notice Attempts to register the caller in the whitelist.\\n     * @dev Reverts if the caller's total supply percentage is below the resolver threshold.\\n     */\\n    function register() external {\\n        uint256 percentageThreshold = resolverPercentageThreshold;\\n        uint256 totalSupply = token.totalSupply();\\n        if (!_isValidBalance(percentageThreshold, token.balanceOf(msg.sender), totalSupply)) revert BalanceLessThanThreshold();\\n        if (!_whitelist.add(msg.sender)) revert AlreadyRegistered();\\n        emit Registered(msg.sender);\\n        _clean(percentageThreshold, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Registers a worker for the resolver to settle orders.\\n     * @param chainId The chain ID where the worker will assigned.\\n     * @param promotee The worker's address.\\n     */\\n    function promote(uint256 chainId, address promotee) external {\\n        if (promotions[msg.sender][chainId] == promotee) revert SamePromotee();\\n        promotions[msg.sender][chainId] = promotee;\\n        emit Promotion(msg.sender, chainId, promotee);\\n    }\\n\\n    /**\\n     * @notice Cleans the whitelist by removing addresses that fall below the resolver threshold.\\n     */\\n    function clean() external {\\n        _clean(resolverPercentageThreshold, token.totalSupply());\\n    }\\n\\n    /**\\n     * @notice Returns the addresses in the whitelist.\\n     * @return whitelist A list of whitelisted addresses.\\n     */\\n    function getWhitelist() external view returns (address[] memory /* whitelist */) {\\n        return _whitelist.items.get();\\n    }\\n\\n    /**\\n     * @notice Returns the worker list for a particular chain ID.\\n     * @param chainId The chain ID to get the promoted addresses for.\\n     * @return promotees A list of worker addresses.\\n     */\\n    function getPromotees(uint256 chainId) external view returns (address[] memory promotees) {\\n        promotees = _whitelist.items.get();\\n        unchecked {\\n            uint256 len = promotees.length;\\n            for (uint256 i = 0; i < len; ++i) {\\n                promotees[i] = promotions[promotees[i]][chainId];\\n            }\\n        }\\n    }\\n\\n    function _setResolverPercentageThreshold(uint256 resolverPercentageThreshold_) private {\\n        resolverPercentageThreshold = resolverPercentageThreshold_;\\n        emit ResolverPercentageThresholdSet(resolverPercentageThreshold_);\\n    }\\n\\n    function _removeFromWhitelist(address account) private {\\n        _whitelist.remove(account);\\n        emit Unregistered(account);\\n    }\\n\\n    function _isValidBalance(uint256 percentageThreshold, uint256 balance, uint256 totalSupply) private pure returns (bool) {\\n        return (\\n            balance > 0 &&\\n            balance * BASIS_POINTS >= totalSupply * percentageThreshold)\\n        ;\\n    }\\n\\n    function _clean(uint256 percentageThreshold, uint256 totalSupply) private {\\n        uint256 whitelistLength = _whitelist.length();\\n        unchecked {\\n            for (uint256 i = 0; i < whitelistLength; ) {\\n                address curWhitelisted = _whitelist.at(i);\\n                uint256 balance = token.balanceOf(curWhitelisted);\\n                if (!_isValidBalance(percentageThreshold, balance, totalSupply)) {\\n                    _removeFromWhitelist(curWhitelisted);\\n                    whitelistLength--;\\n                } else {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15e518c45fc148f5302090ec6e861ef6f926d7aaa1d20a1f48c6b847aa4965e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0346100ef57601f61146d38819003918201601f19168301916001600160401b038311848410176100f45780849260409485528339810103126100ef578051906001600160a01b0380831683036100ef577fcbcd22f10b3a748cd1a2d091ce0b2108352aa00351115f173e159e24d97d280e92602080930151906000543360018060a01b0319821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3608052806002558152a1604051611362908161010b8239608051818181610130015281816101fb01528181610a0b01526110110152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c9081631aa3a008146109be575080632af0516614610950578063715018a6146108b157806378e3214f1461068d5780638da5cb5b1461063c578063960462d1146105ff578063cfaa095114610593578063d01f63f51461054c578063e1f1c4a714610511578063e5136e941461046d578063f204bdb91461035a578063f2fde38b14610223578063fc0c546a146101b05763fc4333cd146100be57600080fd5b3461019b57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b576002546020825180947f18160ddd0000000000000000000000000000000000000000000000000000000082528173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa9182156101a75750839161016e575b61016b9250610fdc565b80f35b90506020823d821161019f575b8161018860209383610cb1565b8101031261019b5761016b915190610161565b8280fd5b3d915061017b565b513d85823e3d90fd5b83823461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50903461019b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b5761025c610bb9565b90610265610c32565b73ffffffffffffffffffffffffffffffffffffffff8092169283156102d75750508254827fffffffffffffffffffffffff00000000000000000000000000000000000000008216178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b50903461019b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b578035916024359173ffffffffffffffffffffffffffffffffffffffff80841680940361046957839033875260016020528387208688526020528387205416146104425750916060917fb863cf86b291171e4b0332ea12b59af030f98a2c74a6d51effaf1109ae4c7f1e933386526001602052808620838752602052808620827fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790558051923384526020840152820152a180f35b90517f53645587000000000000000000000000000000000000000000000000000000008152fd5b8580fd5b5091903461021f57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b5735906104ab610dfd565b92835192815b8481106104c9578651806104c58882610be1565b0390f35b60019073ffffffffffffffffffffffffffffffffffffffff806104ec838a610f26565b511685528286528885208486528652888520541661050a8289610f26565b52016104b1565b83823461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f57602090516127108152f35b83823461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f576104c590610588610dfd565b905191829182610be1565b50903461019b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b577fcbcd22f10b3a748cd1a2d091ce0b2108352aa00351115f173e159e24d97d280e9160209135906105f3610c32565b8160025551908152a180f35b83823461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f576020906002549051908152f35b83823461021f57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f5773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b503461019b57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b57813573ffffffffffffffffffffffffffffffffffffffff8116908181036108ad5784602435926106ea610c32565b836106f3575080f35b801590811561088f575b50156107f95750508047106107d257838080809333611388f13d156107cd573d67ffffffffffffffff81116107a15782519061076160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160183610cb1565b81528460203d92013e5b1561077b5750505b388080808480f35b517fb12d13eb000000000000000000000000000000000000000000000000000000008152fd5b6024856041867f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b61076b565b50517ff4d678b8000000000000000000000000000000000000000000000000000000008152fd5b6044602092938551907fa9059cbb0000000000000000000000000000000000000000000000000000000082523388830152602482015282855af1908161086d575b5015610847575050610773565b517ffb7f5079000000000000000000000000000000000000000000000000000000008152fd5b90503d1561088757506001835114601f3d11165b3861083a565b3b1515610881565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee915014386106fd565b8480fd5b833461094d57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261094d576108e8610c32565b8073ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b83823461021f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021f576020918173ffffffffffffffffffffffffffffffffffffffff91826109a3610bb9565b16815260018552818120602435825285522054169051908152f35b905083913461019b57827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019b576002549073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016947f18160ddd00000000000000000000000000000000000000000000000000000000845260209586858381845afa948515610b7d579087918796610b87575b50906024918451928380927f70a0823100000000000000000000000000000000000000000000000000000000825233878301525afa8015610b7d5785908790610b4c575b610ab9925085610f69565b15610b2557610ac733610d21565b15610afe575061016b93947f2d3734a8e47ac8316e500ac231c90a6e1848ca2285f40d07eaa52005e4b3a0e99151338152a1610fdc565b90517f3a81d6fc000000000000000000000000000000000000000000000000000000008152fd5b90517f63bd63ba000000000000000000000000000000000000000000000000000000008152fd5b50508681813d8311610b76575b610b638183610cb1565b810103126104695784610ab99151610aae565b503d610b59565b83513d88823e3d90fd5b8281939297503d8311610bb2575b610b9f8183610cb1565b8101031261046957519386906024610a6a565b503d610b95565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610bdc57565b600080fd5b6020908160408183019282815285518094520193019160005b828110610c08575050505090565b835173ffffffffffffffffffffffffffffffffffffffff1685529381019392810192600101610bfa565b73ffffffffffffffffffffffffffffffffffffffff600054163303610c5357565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610cf257604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff1660009080825260046020526040822054610de15760016040918380526003602052828420908154918260a01c928315600014610dbb575050848052600360205274ffffffffffffffffffffffffffffffffffffffffff81740100000000000000000000000000000000000000000116848620555b8452600460205201912055600190565b740100000000000000000000000000000000000000000190558185528084862055610dab565b5090565b67ffffffffffffffff8111610cf25760051b60200190565b600090818052600391602090838252604090818120548060a01c92610e2184610de5565b92610e2e82519485610cb1565b848452610e3a85610de5565b977fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08786019901368a37849885518711610efd5786610e7e575b5050505050505050565b855115610ed05773ffffffffffffffffffffffffffffffffffffffff8095169052600196875b878110610eb15750610e74565b8089918552838352868686205416610ec9828a610f26565b5201610ea4565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b600484517ff9a99b25000000000000000000000000000000000000000000000000000000008152fd5b8051821015610f3a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9080159283159384610f7d575b5050505090565b9091929350612710808402938404141715610fad57828102928184041490151715610fad57101538808080610f76565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906000908180526003916020938385526040918281205460a01c93819273ffffffffffffffffffffffffffffffffffffffff807f000000000000000000000000000000000000000000000000000000000000000016965b8086106110465750505050505050505050565b858552888a5281878620541687517f70a082310000000000000000000000000000000000000000000000000000000081528160048201528b816024818d5afa90811561114e578c929187918991611113575b50906110a49187610f69565b611106577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9291816110f67f75cd6de711483e11488a1cd9b66172abccb9e5c19572f92015a7880f0c8c0edc93611158565b508a51908152a101975b97611033565b5050979460010194611100565b92938092508391503d8311611147575b61112d8183610cb1565b8101031261114357518b919086906110a4611098565b8680fd5b503d611123565b89513d89823e3d90fd5b73ffffffffffffffffffffffffffffffffffffffff80911690600091808352602090600482526040928385205490811561132457858052600384528486205460a01c9081831061125c575b50505083805260038252828420548060a01c801561123357906001827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600496959401885260038552878781205511611203575b50845252812055600190565b7fffffffffffffffffffffffff0000000000000000000000000000000000000000908680520184862055386111f7565b600485517f06a2af9e000000000000000000000000000000000000000000000000000000008152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8092018752858720541690820186805285872054908160a01c8110156112fb57829190806112e857507fffffffffffffffffffffffff000000000000000000000000000000000000000090888052600387521617858720555b855260048352838520553880806111a3565b91505086526003845280858720556112d6565b600487517f4e23d035000000000000000000000000000000000000000000000000000000008152fd5b50505050509056fea2646970667358221220e87881068d133097e15aecadd3bd09d2297669edb899658203bb5f7d2a32c71164736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getPromotees(uint256)": {
        "params": {
          "chainId": "The chain ID to get the promoted addresses for."
        },
        "returns": {
          "promotees": "A list of worker addresses."
        }
      },
      "getWhitelist()": {
        "returns": {
          "_0": "whitelist A list of whitelisted addresses."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "promote(uint256,address)": {
        "params": {
          "chainId": "The chain ID where the worker will assigned.",
          "promotee": "The worker's address."
        }
      },
      "register()": {
        "details": "Reverts if the caller's total supply percentage is below the resolver threshold."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueFunds(address,uint256)": {
        "params": {
          "amount": "The amount of tokens to recover.",
          "token_": "The token to recover."
        }
      },
      "setResolverPercentageThreshold(uint256)": {
        "params": {
          "resolverPercentageThreshold_": "The new resolver threshold."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "WhitelistRegistry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Promotion(address,uint256,address)": {
        "notice": "Emitted when a new worker for a resolver is set."
      },
      "Registered(address)": {
        "notice": "Emitted after a new resolver is registered."
      },
      "ResolverPercentageThresholdSet(uint256)": {
        "notice": "Emitted when the new minimum total supply percentage to get into the whitelist is set."
      },
      "Unregistered(address)": {
        "notice": "Emitted when a resolver is pushed out of whitelist."
      }
    },
    "kind": "user",
    "methods": {
      "clean()": {
        "notice": "Cleans the whitelist by removing addresses that fall below the resolver threshold."
      },
      "getPromotees(uint256)": {
        "notice": "Returns the worker list for a particular chain ID."
      },
      "getWhitelist()": {
        "notice": "Returns the addresses in the whitelist."
      },
      "promote(uint256,address)": {
        "notice": "Registers a worker for the resolver to settle orders."
      },
      "register()": {
        "notice": "Attempts to register the caller in the whitelist."
      },
      "rescueFunds(address,uint256)": {
        "notice": "Allows the contract owner to recover any tokens accidentally sent to the contract."
      },
      "setResolverPercentageThreshold(uint256)": {
        "notice": "Allows the contract owner to set a new resolver threshold. The resolver threshold is the minimum total supply percentage required to get into the whitelist."
      }
    },
    "notice": "The contract manages a whitelist for trading resolvers, providing functions to register, promote and remove addresses, as well as setting various thresholds and limits. It also includes an emergency rescue function for tokens sent to the contract accidentally.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12046,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16247,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "promotions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 16249,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "resolverPercentageThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16252,
        "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
        "label": "_whitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Data)7952_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Data)7473_storage": {
        "encoding": "inplace",
        "label": "struct AddressArray.Data",
        "members": [
          {
            "astId": 7472,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "_raw",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Data)7952_storage": {
        "encoding": "inplace",
        "label": "struct AddressSet.Data",
        "members": [
          {
            "astId": 7947,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "items",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Data)7473_storage"
          },
          {
            "astId": 7951,
            "contract": "contracts/WhitelistRegistry.sol:WhitelistRegistry",
            "label": "lookup",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}