{
  "address": "0xAccfAc2339e16DC80c50d2fa81b5c2B049B4f947",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract St1inch",
          "name": "st1inch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ApproveDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DefaultFarmTokenMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRegisteredDelegatee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OriginInTheFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferDisabled",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "defaultFarm",
          "type": "address"
        }
      ],
      "name": "DefaultFarmSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "Delegated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "RegisterDelegatee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "defaultFarms",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegated",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expBase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSharePods",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "origin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "contract IDelegatedShare",
          "name": "shareToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "registration",
      "outputs": [
        {
          "internalType": "contract IDelegatedShare",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "farm",
          "type": "address"
        }
      ],
      "name": "setDefaultFarm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharePodGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Pods",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "updateBalances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "votingPowerOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8d41e87cffd0f27183116060d344b1a6430602320eb214d436386e68a09509b2",
  "receipt": {
    "to": null,
    "from": "0x11799622F4D98A24514011E8527B969f7488eF47",
    "contractAddress": "0xAccfAc2339e16DC80c50d2fa81b5c2B049B4f947",
    "transactionIndex": 102,
    "gasUsed": "5390033",
    "logsBloom": "0x
    "blockHash": "0xcecfeb2586ef9f2cda77ad8119509831f9a7f58c750e8463e4768f3095e39514",
    "transactionHash": "0x8d41e87cffd0f27183116060d344b1a6430602320eb214d436386e68a09509b2",
    "logs": [],
    "blockNumber": 16269190,
    "cumulativeGasUsed": "29762878",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Delegated st1INCH",
    "dst1INCH",
    "0x9A0C8Ff858d273f57072D714bca7411D717501D7"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1ab588ded62f224db79a571d0cc8634",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract St1inch\",\"name\":\"st1inch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefaultFarmTokenMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRegisteredDelegatee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OriginInTheFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferDisabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"defaultFarm\",\"type\":\"address\"}],\"name\":\"DefaultFarmSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"Delegated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"RegisterDelegatee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"defaultFarms\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expBase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSharePods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"contract IDelegatedShare\",\"name\":\"shareToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"registration\",\"outputs\":[{\"internalType\":\"contract IDelegatedShare\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"farm\",\"type\":\"address\"}],\"name\":\"setDefaultFarm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharePodGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Pods\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"votingPowerOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"votingPowerOf(address)\":{\"details\":\"we assume that voting power is a function of balance that preserves order\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PowerPod.sol\":\"PowerPod\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@1inch/delegating/contracts/DelegatedShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/ERC20Pods.sol\\\";\\nimport \\\"./interfaces/IDelegatedShare.sol\\\";\\n\\ncontract DelegatedShare is IDelegatedShare, ERC20Pods {\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n    error NotOwner();\\n\\n    address immutable private _owner;\\n\\n    modifier onlyOwner {\\n        if (msg.sender != _owner) revert NotOwner();\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxUserPods,\\n        uint256 podCallGasLimit\\n    ) ERC20(name, symbol) ERC20Pods(maxUserPods, podCallGasLimit) {\\n        _owner = msg.sender;\\n    }\\n\\n    function addDefaultFarmIfNeeded(address account, address farm) external onlyOwner {\\n        if (!hasPod(account, farm)) {\\n            _addPod(account, farm);\\n        }\\n    }\\n\\n    function mint(address account, uint256 amount) external onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) external onlyOwner {\\n        _burn(account, amount);\\n    }\\n\\n    function approve(address /* spender */, uint256 /* amount */) public pure override(ERC20, IERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address /* from */, address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address /* spender */, uint256 /* addedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address /* spender */, uint256 /* subtractedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0x73c8eb015418406c096421cae1a320ffcd4ce393363dd4957138cfc60ef99b12\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/DelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\n\\nimport \\\"./interfaces/IDelegationPod.sol\\\";\\n\\ncontract DelegationPod is IDelegationPod, Pod, ERC20 {\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n\\n    mapping(address => address) public delegated;\\n\\n    constructor(string memory name_, string memory symbol_, IERC20Pods token_)\\n        ERC20(name_, symbol_) Pod(token_)\\n    {}  // solhint-disable-line no-empty-blocks\\n\\n    function delegate(address delegatee) public virtual {\\n        address prevDelegatee = delegated[msg.sender];\\n        if (prevDelegatee != delegatee) {\\n            delegated[msg.sender] = delegatee;\\n            emit Delegated(msg.sender, delegatee);\\n            uint256 balance = IERC20Pods(token).podBalanceOf(address(this), msg.sender);\\n            if (balance > 0) {\\n                _updateBalances(msg.sender, msg.sender, prevDelegatee, delegatee, balance);\\n            }\\n        }\\n    }\\n\\n    function _updateBalances(address from, address to, uint256 amount) internal override {\\n        _updateBalances(\\n            from,\\n            to,\\n            from == address(0) ? address(0) : delegated[from],\\n            to == address(0) ? address(0) : delegated[to],\\n            amount\\n        );\\n    }\\n\\n    function _updateBalances(address /* from */, address /* to */, address fromDelegatee, address toDelegatee, uint256 amount) internal virtual {\\n        if (fromDelegatee != toDelegatee && amount > 0) {\\n            if (fromDelegatee == address(0)) {\\n                _mint(toDelegatee, amount);\\n            } else if (toDelegatee == address(0)) {\\n                _burn(fromDelegatee, amount);\\n            } else {\\n                _transfer(fromDelegatee, toDelegatee, amount);\\n            }\\n        }\\n    }\\n\\n    // ERC20 overrides\\n\\n    function transfer(address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address /* from */, address /* to */, uint256 /* amount */) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function approve(address /* spender */, uint256 /* amount */) public pure override(ERC20, IERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function increaseAllowance(address /* spender */, uint256 /* addedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address /* spender */, uint256 /* subtractedValue */) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xb25a84a1122a41ec7a8fa1ef7360e7aa32d9638f4c1bb92e711bf1361e5a8a04\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/FarmingDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TokenizedDelegationPod.sol\\\";\\nimport \\\"./interfaces/IFarmingDelegationPod.sol\\\";\\nimport \\\"@1inch/farming/contracts/MultiFarmingPod.sol\\\";\\n\\ncontract FarmingDelegationPod is IFarmingDelegationPod, TokenizedDelegationPod {\\n    error DefaultFarmTokenMismatch();\\n\\n    uint256 private constant _MAX_FARM_REWARDS = 3;\\n\\n    mapping(address => address) public defaultFarms;\\n\\n    constructor(string memory name_, string memory symbol_, IERC20Pods token_, uint256 maxSharePods_, uint256 sharePodGasLimit_)\\n        TokenizedDelegationPod(name_, symbol_, token_, maxSharePods_, sharePodGasLimit_)\\n    {}  // solhint-disable-line no-empty-blocks\\n\\n    function register(string memory name, string memory symbol) public override(ITokenizedDelegationPod, TokenizedDelegationPod) returns(IDelegatedShare shareToken) {\\n        shareToken = super.register(name, symbol);\\n        MultiFarmingPod farm = new MultiFarmingPod(shareToken, _MAX_FARM_REWARDS);\\n        farm.transferOwnership(msg.sender);\\n        defaultFarms[msg.sender] = address(farm);\\n    }\\n\\n    function delegate(address delegatee) public override(IDelegationPod, TokenizedDelegationPod) {\\n        super.delegate(delegatee);\\n        address defaultFarm = defaultFarms[delegatee];\\n        if (defaultFarm != address(0)) {\\n            registration[delegatee].addDefaultFarmIfNeeded(msg.sender, defaultFarm);\\n        }\\n    }\\n\\n    function setDefaultFarm(address farm) external onlyRegistered {\\n        if (farm != address(0) && Pod(farm).token() != registration[msg.sender]) revert DefaultFarmTokenMismatch();\\n        defaultFarms[msg.sender] = farm;\\n        emit DefaultFarmSet(farm);\\n    }\\n}\\n\",\"keccak256\":\"0xd5bcc0e5e9b9d6524879884a60f6049114dad11c13c52ad3545ac9c03623e174\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/TokenizedDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./DelegationPod.sol\\\";\\nimport \\\"./DelegatedShare.sol\\\";\\nimport \\\"./interfaces/ITokenizedDelegationPod.sol\\\";\\nimport \\\"./interfaces/IDelegatedShare.sol\\\";\\n\\ncontract TokenizedDelegationPod is ITokenizedDelegationPod, DelegationPod {\\n    error NotRegisteredDelegatee();\\n    error AlreadyRegistered();\\n\\n    uint256 public immutable maxSharePods;\\n    uint256 public immutable sharePodGasLimit;\\n\\n    mapping(address => IDelegatedShare) public registration;\\n\\n    modifier onlyRegistered {\\n        if (address(registration[msg.sender]) == address(0)) revert NotRegisteredDelegatee();\\n        _;\\n    }\\n\\n    modifier onlyNotRegistered {\\n        if (address(registration[msg.sender]) != address(0)) revert AlreadyRegistered();\\n        _;\\n    }\\n\\n    constructor(string memory name_, string memory symbol_, IERC20Pods token_, uint256 maxSharePods_, uint256 sharePodGasLimit_) DelegationPod(name_, symbol_, token_) {\\n        maxSharePods = maxSharePods_;\\n        sharePodGasLimit = sharePodGasLimit_;\\n    }\\n\\n    function delegate(address delegatee) public virtual override(IDelegationPod, DelegationPod) {\\n        if (delegatee != address(0) && address(registration[delegatee]) == address(0)) revert NotRegisteredDelegatee();\\n        super.delegate(delegatee);\\n    }\\n\\n    function register(string memory name, string memory symbol) public virtual onlyNotRegistered returns(IDelegatedShare shareToken) {\\n        shareToken = new DelegatedShare(name, symbol, maxSharePods, sharePodGasLimit);\\n        registration[msg.sender] = shareToken;\\n        emit RegisterDelegatee(msg.sender);\\n    }\\n\\n    function _updateBalances(address from, address to, address fromDelegatee, address toDelegatee, uint256 amount) internal virtual override {\\n        super._updateBalances(from, to, fromDelegatee, toDelegatee, amount);\\n\\n        if (fromDelegatee != address(0)) {\\n            registration[fromDelegatee].burn(from, amount);\\n        }\\n        if (toDelegatee != address(0)) {\\n            registration[toDelegatee].mint(to, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x563484a06a324d284ce64c5df2300b00dcf687b4654e90c1d124bd5611dad5c9\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IDelegatedShare.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\\\";\\n\\ninterface IDelegatedShare is IERC20Pods {\\n    function addDefaultFarmIfNeeded(address account, address farm) external; // onlyOwner\\n    function mint(address account, uint256 amount) external; // onlyOwner\\n    function burn(address account, uint256 amount) external; // onlyOwner\\n}\\n\",\"keccak256\":\"0xbc4c6e07cc95c6ca9036da58b29bf10e2bc94a5e9e54c45fd0a9ac238f4e9709\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\\\";\\n\\ninterface IDelegationPod is IPod, IERC20 {\\n    event Delegated(address account, address delegatee);\\n\\n    function delegated(address delegator) external view returns(address delegatee);\\n    function delegate(address delegatee) external;\\n}\\n\",\"keccak256\":\"0x7f4a2cc62a32a8cc2c0e0cdae8e5312a068df52a94a393e0046bff67896abb93\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/IFarmingDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ITokenizedDelegationPod.sol\\\";\\n\\ninterface IFarmingDelegationPod is ITokenizedDelegationPod {\\n    event DefaultFarmSet(address defaultFarm);\\n\\n    function setDefaultFarm(address farm) external;\\n}\\n\",\"keccak256\":\"0xe7a116680b8c33e137b27ebe5b8e5250d05ca556a9880349790008e48126e146\",\"license\":\"MIT\"},\"@1inch/delegating/contracts/interfaces/ITokenizedDelegationPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IDelegationPod.sol\\\";\\nimport \\\"./IDelegatedShare.sol\\\";\\n\\ninterface ITokenizedDelegationPod is IDelegationPod {\\n    event RegisterDelegatee(address delegatee);\\n\\n    function register(string memory name, string memory symbol) external returns(IDelegatedShare shareToken);\\n    function registration(address account) external returns(IDelegatedShare shareToken);\\n}\\n\",\"keccak256\":\"0x52d9f4e73c4962a86454d9adb80260357ba13a45d5952a94f76a0cc58fe3a24f\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/ERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\n\\nimport \\\"./interfaces/IERC20Pods.sol\\\";\\nimport \\\"./interfaces/IPod.sol\\\";\\nimport \\\"./libs/ReentrancyGuard.sol\\\";\\n\\nabstract contract ERC20Pods is ERC20, IERC20Pods, ReentrancyGuardExt {\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    error PodAlreadyAdded();\\n    error PodNotFound();\\n    error InvalidPodAddress();\\n    error PodsLimitReachedForAccount();\\n    error InsufficientGas();\\n    error ZeroPodsLimit();\\n\\n    uint256 public immutable podsLimit;\\n    uint256 public immutable podCallGasLimit;\\n\\n    ReentrancyGuardLib.Data private _guard;\\n    mapping(address => AddressSet.Data) private _pods;\\n\\n    constructor(uint256 podsLimit_, uint256 podCallGasLimit_) {\\n        if (podsLimit_ == 0) revert ZeroPodsLimit();\\n        podsLimit = podsLimit_;\\n        podCallGasLimit = podCallGasLimit_;\\n        _guard.init();\\n    }\\n\\n    function hasPod(address account, address pod) public view virtual returns(bool) {\\n        return _pods[account].contains(pod);\\n    }\\n\\n    function podsCount(address account) public view virtual returns(uint256) {\\n        return _pods[account].length();\\n    }\\n\\n    function podAt(address account, uint256 index) public view virtual returns(address) {\\n        return _pods[account].at(index);\\n    }\\n\\n    function pods(address account) public view virtual returns(address[] memory) {\\n        return _pods[account].items.get();\\n    }\\n\\n    function balanceOf(address account) public nonReentrantView(_guard) view override(IERC20, ERC20) virtual returns(uint256) {\\n        return super.balanceOf(account);\\n    }\\n\\n    function podBalanceOf(address pod, address account) public nonReentrantView(_guard) view virtual returns(uint256) {\\n        if (hasPod(account, pod)) {\\n            return super.balanceOf(account);\\n        }\\n        return 0;\\n    }\\n\\n    function addPod(address pod) public virtual {\\n        _addPod(msg.sender, pod);\\n    }\\n\\n    function removePod(address pod) public virtual {\\n        _removePod(msg.sender, pod);\\n    }\\n\\n    function removeAllPods() public virtual {\\n        _removeAllPods(msg.sender);\\n    }\\n\\n    function _addPod(address account, address pod) internal virtual {\\n        if (pod == address(0)) revert InvalidPodAddress();\\n        if (!_pods[account].add(pod)) revert PodAlreadyAdded();\\n        if (_pods[account].length() > podsLimit) revert PodsLimitReachedForAccount();\\n\\n        emit PodAdded(account, pod);\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, address(0), account, balance);\\n        }\\n    }\\n\\n    function _removePod(address account, address pod) internal virtual {\\n        if (!_pods[account].remove(pod)) revert PodNotFound();\\n\\n        emit PodRemoved(account, pod);\\n        uint256 balance = balanceOf(account);\\n        if (balance > 0) {\\n            _updateBalances(pod, account, address(0), balance);\\n        }\\n    }\\n\\n    function _removeAllPods(address account) internal virtual {\\n        address[] memory items = _pods[account].items.get();\\n        uint256 balance = balanceOf(account);\\n        unchecked {\\n            for (uint256 i = items.length; i > 0; i--) {\\n                _pods[account].remove(items[i - 1]);\\n                emit PodRemoved(account, items[i - 1]);\\n                if (balance > 0) {\\n                    _updateBalances(items[i - 1], account, address(0), balance);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Assembly implementation of the gas limited call to avoid return gas bomb,\\n    // moreover call to a destructed pod would also revert even inside try-catch block in Solidity 0.8.17\\n    /// @dev try IPod(pod).updateBalances{gas: _POD_CALL_GAS_LIMIT}(from, to, amount) {} catch {}\\n    function _updateBalances(address pod, address from, address to, uint256 amount) private {\\n        bytes4 selector = IPod.updateBalances.selector;\\n        bytes4 exception = InsufficientGas.selector;\\n        uint256 gasLimit = podCallGasLimit;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, selector)\\n            mstore(add(ptr, 0x04), from)\\n            mstore(add(ptr, 0x24), to)\\n            mstore(add(ptr, 0x44), amount)\\n\\n            if lt(div(mul(gas(), 63), 64), gasLimit) {\\n                mstore(0, exception)\\n                revert(0, 4)\\n            }\\n            pop(call(gasLimit, pod, 0, ptr, 0x64, 0, 0))\\n        }\\n    }\\n\\n    // ERC20 Overrides\\n\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal nonReentrant(_guard) override virtual {\\n        super._afterTokenTransfer(from, to, amount);\\n\\n        unchecked {\\n            if (amount > 0 && from != to) {\\n                address[] memory a = _pods[from].items.get();\\n                address[] memory b = _pods[to].items.get();\\n                uint256 aLength = a.length;\\n                uint256 bLength = b.length;\\n\\n                for (uint256 i = 0; i < aLength; i++) {\\n                    address pod = a[i];\\n\\n                    uint256 j;\\n                    for (j = 0; j < bLength; j++) {\\n                        if (pod == b[j]) {\\n                            // Both parties are participating of the same Pod\\n                            _updateBalances(pod, from, to, amount);\\n                            b[j] = address(0);\\n                            break;\\n                        }\\n                    }\\n\\n                    if (j == bLength) {\\n                        // Sender is participating in a Pod, but receiver is not\\n                        _updateBalances(pod, from, address(0), amount);\\n                    }\\n                }\\n\\n                for (uint256 j = 0; j < bLength; j++) {\\n                    address pod = b[j];\\n                    if (pod != address(0)) {\\n                        // Receiver is participating in a Pod, but sender is not\\n                        _updateBalances(pod, address(0), to, amount);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca029b97ce35db3f3eda24efba7360d664ba36e52533fc394604c560252a7219\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/Pod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IPod.sol\\\";\\nimport \\\"./interfaces/IERC20Pods.sol\\\";\\n\\nabstract contract Pod is IPod {\\n    error AccessDenied();\\n\\n    IERC20Pods public immutable token;\\n\\n    modifier onlyToken {\\n        if (msg.sender != address(token)) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(IERC20Pods token_) {\\n        token = token_;\\n    }\\n\\n    function updateBalances(address from, address to, uint256 amount) external onlyToken {\\n        _updateBalances(from, to, amount);\\n    }\\n\\n    function _updateBalances(address from, address to, uint256 amount) internal virtual;\\n}\\n\",\"keccak256\":\"0x6275a7b899f4b9399e62dac6b0ae57195e347eb7879de76c36c0d92a22b13e57\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Pods is IERC20 {\\n    event PodAdded(address account, address pod);\\n    event PodRemoved(address account, address pod);\\n\\n    function hasPod(address account, address pod) external view returns(bool);\\n    function podsCount(address account) external view returns(uint256);\\n    function podAt(address account, uint256 index) external view returns(address);\\n    function pods(address account) external view returns(address[] memory);\\n    function podBalanceOf(address pod, address account) external view returns(uint256);\\n\\n    function addPod(address pod) external;\\n    function removePod(address pod) external;\\n    function removeAllPods() external;\\n}\\n\",\"keccak256\":\"0x67f80b12d4d74805fa78ac50a1b526818de3111e9861f82a8dd979f04a1d7ec0\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPod {\\n    function updateBalances(address from, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x66c7e29ad8c4633351431ba650e6a198b30f1c1091ca147f9e890c7cb6334028\",\"license\":\"MIT\"},\"@1inch/erc20-pods/contracts/libs/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ReentrancyGuardLib {\\n    error ReentrantCall();\\n\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    struct Data {\\n        uint256 _status;\\n    }\\n\\n    function init(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function enter(Data storage self) internal {\\n        if (self._status == _ENTERED) revert ReentrantCall();\\n        self._status = _ENTERED;\\n    }\\n\\n    function exit(Data storage self) internal {\\n        self._status = _NOT_ENTERED;\\n    }\\n\\n    function check(Data storage self) internal view returns (bool) {\\n        return self._status == _ENTERED;\\n    }\\n}\\n\\ncontract ReentrancyGuardExt {\\n    using ReentrancyGuardLib for ReentrancyGuardLib.Data;\\n\\n    modifier nonReentrant(ReentrancyGuardLib.Data storage self) {\\n        self.enter();\\n        _;\\n        self.exit();\\n    }\\n\\n    modifier nonReentrantView(ReentrancyGuardLib.Data storage self) {\\n        if (self.check()) revert ReentrancyGuardLib.ReentrantCall();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5b01eb0f7bcbf97f72b2192adebea04530b2aba0a6f3b445be58caed99ef2670\",\"license\":\"MIT\"},\"@1inch/farming/contracts/FarmingLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./accounting/FarmAccounting.sol\\\";\\nimport \\\"./accounting/UserAccounting.sol\\\";\\n\\nlibrary FarmingLib {\\n    using FarmAccounting for FarmAccounting.Info;\\n    using UserAccounting for UserAccounting.Info;\\n    using FarmingLib for FarmingLib.Info;\\n\\n    struct Data {\\n        FarmAccounting.Info farmInfo;\\n        UserAccounting.Info userInfo;\\n    }\\n\\n    struct Info {\\n        function() internal view returns(uint256) getTotalSupply;\\n        bytes32 dataSlot;\\n    }\\n\\n    function makeInfo(function() internal view returns(uint256) getTotalSupply, Data storage data) internal pure returns(Info memory info) {\\n        info.getTotalSupply = getTotalSupply;\\n        bytes32 dataSlot;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            dataSlot := data.slot\\n        }\\n        info.dataSlot = dataSlot;\\n    }\\n\\n    function getData(Info memory self) internal pure returns(Data storage data) {\\n        bytes32 dataSlot = self.dataSlot;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            data.slot := dataSlot\\n        }\\n    }\\n\\n    function startFarming(Info memory self, uint256 amount, uint256 period) internal returns(uint256 reward) {\\n        Data storage data = self.getData();\\n        data.userInfo.updateFarmedPerToken(_farmedPerToken(self));\\n        reward = data.farmInfo.startFarming(amount, period);\\n    }\\n\\n    function farmed(Info memory self, address account, uint256 balance) internal view returns(uint256) {\\n        return self.getData().userInfo.farmed(account, balance, _farmedPerToken(self));\\n    }\\n\\n    function claim(Info memory self, address account, uint256 balance) internal returns(uint256 amount) {\\n        Data storage data = self.getData();\\n        uint256 fpt = _farmedPerToken(self);\\n        amount = data.userInfo.farmed(account, balance, fpt);\\n        if (amount > 0) {\\n            data.userInfo.eraseFarmed(account, balance, fpt);\\n        }\\n    }\\n\\n    function updateBalances(Info memory self, address from, address to, uint256 amount) internal {\\n        self.getData().userInfo.updateBalances(from, to, amount, _farmedPerToken(self));\\n    }\\n\\n    function _farmedPerToken(Info memory self) private view returns (uint256) {\\n        return self.getData().userInfo.farmedPerToken(_infoToContext(self), _lazyGetSupply, _lazyGetFarmed);\\n    }\\n\\n    // UserAccounting bindings\\n\\n    function _lazyGetSupply(bytes32 context) private view returns(uint256) {\\n        Info memory self = _contextToInfo(context);\\n        return self.getTotalSupply();\\n    }\\n\\n    function _lazyGetFarmed(bytes32 context, uint256 checkpoint) private view returns(uint256) {\\n        Info memory self = _contextToInfo(context);\\n        return self.getData().farmInfo.farmedSinceCheckpointScaled(checkpoint);\\n    }\\n\\n    function _contextToInfo(bytes32 context) private pure returns(Info memory self) {\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            self := context\\n        }\\n    }\\n\\n    function _infoToContext(Info memory self) private pure returns(bytes32 context) {\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            context := self\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca1f78161c2b5827e76d22534b1dbfc356c5c82e8d8ed5572af3f2aa5b8552c1\",\"license\":\"MIT\"},\"@1inch/farming/contracts/MultiFarmingPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IERC20Pods.sol\\\";\\n\\nimport \\\"./interfaces/IMultiFarmingPod.sol\\\";\\nimport \\\"./FarmingLib.sol\\\";\\n\\ncontract MultiFarmingPod is Pod, IMultiFarmingPod, Ownable {\\n    using SafeERC20 for IERC20;\\n    using FarmingLib for FarmingLib.Info;\\n    using Address for address payable;\\n    using AddressSet for AddressSet.Data;\\n    using AddressArray for AddressArray.Data;\\n\\n    error ZeroFarmableTokenAddress();\\n    error ZeroRewardsTokenAddress();\\n    error SameDistributor();\\n    error RewardsTokenAlreadyAdded();\\n    error RewardsTokensLimitTooHigh(uint256);\\n    error RewardsTokensLimitReached();\\n    error RewardsTokenNotFound();\\n\\n    uint256 public immutable rewardsTokensLimit;\\n\\n    address private _distributor;\\n    uint256 private _totalSupply;\\n    mapping(IERC20 => FarmingLib.Data) private _farms;\\n    AddressSet.Data private _rewardsTokens;\\n\\n    modifier onlyDistributor {\\n        if (msg.sender != _distributor) revert AccessDenied();\\n        _;\\n    }\\n\\n    constructor(IERC20Pods farmableToken_, uint256 rewardsTokensLimit_) Pod(farmableToken_) {\\n        if (rewardsTokensLimit_ > 5) revert RewardsTokensLimitTooHigh(rewardsTokensLimit_);\\n        if (address(farmableToken_) == address(0)) revert ZeroFarmableTokenAddress();\\n\\n        rewardsTokensLimit = rewardsTokensLimit_;\\n    }\\n\\n    function rewardsTokens() external view returns(address[] memory) {\\n        return _rewardsTokens.items.get();\\n    }\\n\\n    function farmInfo(IERC20 rewardsToken) public view returns(FarmAccounting.Info memory) {\\n        return _farms[rewardsToken].farmInfo;\\n    }\\n\\n    function totalSupply() public view returns(uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function distributor() public view returns(address) {\\n        return _distributor;\\n    }\\n\\n    function setDistributor(address distributor_) public virtual onlyOwner {\\n        address oldDistributor = _distributor;\\n        if (distributor_ == oldDistributor) revert SameDistributor();\\n        emit DistributorChanged(oldDistributor, distributor_);\\n        _distributor = distributor_;\\n    }\\n\\n    function addRewardsToken(address rewardsToken) public virtual onlyOwner {\\n        if (_rewardsTokens.length() == rewardsTokensLimit) revert RewardsTokensLimitReached();\\n        if (!_rewardsTokens.add(rewardsToken)) revert RewardsTokenAlreadyAdded();\\n        emit FarmCreated(address(token), rewardsToken);\\n    }\\n\\n    function startFarming(IERC20 rewardsToken, uint256 amount, uint256 period) public virtual onlyDistributor {\\n        if (!_rewardsTokens.contains(address(rewardsToken))) revert RewardsTokenNotFound();\\n\\n        uint256 reward = _makeInfo(rewardsToken).startFarming(amount, period);\\n        emit RewardAdded(address(rewardsToken), reward, period);\\n        rewardsToken.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function farmed(IERC20 rewardsToken, address account) public view virtual returns(uint256) {\\n        uint256 balance = IERC20Pods(token).podBalanceOf(address(this), account);\\n        return _makeInfo(rewardsToken).farmed(account, balance);\\n    }\\n\\n    function claim(IERC20 rewardsToken) public virtual {\\n        uint256 podBalance = IERC20Pods(token).podBalanceOf(address(this), msg.sender);\\n        _claim(rewardsToken, msg.sender, podBalance);\\n    }\\n\\n    function claim() public virtual {\\n        uint256 podBalance = IERC20Pods(token).podBalanceOf(address(this), msg.sender);\\n        address[] memory tokens = _rewardsTokens.items.get();\\n        unchecked {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                _claim(IERC20(tokens[i]), msg.sender, podBalance);\\n            }\\n        }\\n    }\\n\\n    function _claim(IERC20 rewardsToken, address account, uint256 podBalance) private {\\n        uint256 amount = _makeInfo(rewardsToken).claim(account, podBalance);\\n        if (amount > 0) {\\n            _transferReward(rewardsToken, account, amount);\\n        }\\n    }\\n\\n    function _transferReward(IERC20 reward, address to, uint256 amount) internal virtual {\\n        reward.safeTransfer(to, amount);\\n    }\\n\\n    function _updateBalances(address from, address to, uint256 amount) internal virtual override {\\n        address[] memory tokens = _rewardsTokens.items.get();\\n        unchecked {\\n            for (uint256 i = 0; i < tokens.length; i++) {\\n                _makeInfo(IERC20(tokens[i])).updateBalances(from, to, amount);\\n            }\\n        }\\n        if (from == address(0)) {\\n            _totalSupply += amount;\\n        }\\n        if (to == address(0)) {\\n            _totalSupply -= amount;\\n        }\\n    }\\n\\n    function rescueFunds(IERC20 token, uint256 amount) public virtual onlyDistributor {\\n        if(token == IERC20(address(0))) {\\n            payable(_distributor).sendValue(amount);\\n        } else {\\n            token.safeTransfer(_distributor, amount);\\n        }\\n    }\\n\\n    function _makeInfo(IERC20 rewardsToken) private view returns(FarmingLib.Info memory) {\\n        return FarmingLib.makeInfo(totalSupply, _farms[rewardsToken]);\\n    }\\n}\\n\",\"keccak256\":\"0x50b49a3681b44d3eb0f566e8ede90e0f9c59409f4f7baf34b17154206fcd3518\",\"license\":\"MIT\"},\"@1inch/farming/contracts/accounting/FarmAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary FarmAccounting {\\n    error ZeroDuration();\\n    error DurationTooLarge();\\n    error AmountTooLarge();\\n\\n    struct Info {\\n        uint40 finished;\\n        uint32 duration;\\n        uint184 reward;\\n    }\\n\\n    uint256 internal constant _MAX_REWARD_AMOUNT = 1e32;  // 108 bits\\n    uint256 internal constant _SCALE = 1e18;  // 60 bits\\n\\n    /// @dev Requires extra 18 decimals for precision, result fits in 168 bits\\n    function farmedSinceCheckpointScaled(Info memory info, uint256 checkpoint) internal view returns(uint256 amount) {\\n        unchecked {\\n            if (info.duration > 0) {\\n                uint256 elapsed = Math.min(block.timestamp, info.finished) - Math.min(checkpoint, info.finished);\\n                // size of (type(uint32).max * _MAX_REWARD_AMOUNT * _SCALE) is less than 200 bits, so there is no overflow\\n                return elapsed * info.reward * _SCALE / info.duration;\\n            }\\n        }\\n    }\\n\\n    function startFarming(Info storage info, uint256 amount, uint256 period) internal returns(uint256) {\\n        if (period == 0) revert ZeroDuration();\\n        if (period > type(uint32).max) revert DurationTooLarge();\\n        if (amount > _MAX_REWARD_AMOUNT) revert AmountTooLarge();\\n\\n        // If something left from prev farming add it to the new farming\\n        Info memory prev = info;\\n        if (block.timestamp < prev.finished) {\\n            amount += prev.reward - farmedSinceCheckpointScaled(prev, prev.finished - prev.duration) / _SCALE;\\n        }\\n\\n        (info.finished, info.duration, info.reward) = (uint40(block.timestamp + period), uint32(period), uint184(amount));\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x4ca473153b1a9c6690c2509a9528555eded181e6ccb72225fd882e03db08378c\",\"license\":\"MIT\"},\"@1inch/farming/contracts/accounting/UserAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./FarmAccounting.sol\\\";\\n\\nlibrary UserAccounting {\\n    struct Info {\\n        uint40 checkpoint;\\n        uint216 farmedPerTokenStored;\\n        mapping(address => int256) corrections;\\n    }\\n\\n    function farmedPerToken(\\n        Info storage info,\\n        bytes32 context,\\n        function(bytes32) internal view returns(uint256) lazyGetSupply,\\n        function(bytes32, uint256) internal view returns(uint256) lazyGetFarmed\\n    ) internal view returns(uint256) {\\n        (uint256 checkpoint, uint256 fpt) = (info.checkpoint, info.farmedPerTokenStored);\\n        if (block.timestamp != checkpoint) {\\n            uint256 supply = lazyGetSupply(context);\\n            if (supply > 0) {\\n                // fpt increases by 168 bit / supply\\n                unchecked { fpt += lazyGetFarmed(context, checkpoint) / supply; }\\n            }\\n        }\\n        return fpt;\\n    }\\n\\n    function farmed(Info storage info, address account, uint256 balance, uint256 fpt) internal view returns(uint256) {\\n        // balance * fpt is less than 168 bit\\n        return uint256(int256(balance * fpt) - info.corrections[account]) / FarmAccounting._SCALE;\\n    }\\n\\n    function eraseFarmed(Info storage info, address account, uint256 balance, uint256 fpt) internal {\\n        // balance * fpt is less than 168 bit\\n        info.corrections[account] = int256(balance * fpt);\\n    }\\n\\n    function updateFarmedPerToken(Info storage info, uint256 fpt) internal {\\n        (info.checkpoint, info.farmedPerTokenStored) = (uint40(block.timestamp), uint216(fpt));\\n    }\\n\\n    function updateBalances(Info storage info, address from, address to, uint256 amount, uint256 fpt) internal {\\n        bool fromZero = (from == address(0));\\n        bool toZero = (to == address(0));\\n        if (amount > 0 && from != to) {\\n            if (fromZero || toZero) {\\n                updateFarmedPerToken(info, fpt);\\n            }\\n\\n            // fpt is less than 168 bit, so amount should be less 98 bit\\n            int256 diff = int256(amount * fpt);\\n            if (!fromZero) {\\n                info.corrections[from] -= diff;\\n            }\\n            if (!toZero) {\\n                info.corrections[to] += diff;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb88b7f70e6a1cdbdc0cbf395491d4f6df3bc9583b20b4b403ab23651b86e0911\",\"license\":\"MIT\"},\"@1inch/farming/contracts/interfaces/IMultiFarmingPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/interfaces/IPod.sol\\\";\\nimport \\\"../accounting/FarmAccounting.sol\\\";\\n\\ninterface IMultiFarmingPod is IPod {\\n    event FarmCreated(address token, address reward);\\n    event DistributorChanged(address oldDistributor, address newDistributor);\\n    event RewardAdded(address token, uint256 reward, uint256 duration);\\n\\n    // View functions\\n    function totalSupply() external view returns(uint256);\\n    function distributor() external view returns(address);\\n    function farmInfo(IERC20 rewardsToken) external view returns(FarmAccounting.Info memory);\\n    function farmed(IERC20 rewardsToken, address account) external view returns(uint256);\\n\\n    // User functions\\n    function claim(IERC20 rewardsToken) external;\\n    function claim() external;\\n\\n    // Owner functions\\n    function setDistributor(address distributor_) external;\\n\\n    // Distributor functions\\n    function startFarming(IERC20 rewardsToken, uint256 amount, uint256 period) external;\\n    function rescueFunds(IERC20 token, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x68954d8109f3329cb507a9878f0103de0b7530ed3a53e76b63499e006134b72b\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\ninterface IDaiLikePermit {\\n    function permit(\\n        address holder,\\n        address spender,\\n        uint256 nonce,\\n        uint256 expiry,\\n        bool allowed,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x10105446e709abf11b13721a516ffa24d3c5bec39c7925a367968a6a7519579f\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Library that implements address array on mapping, stores array length at 0 index.\\nlibrary AddressArray {\\n    error IndexOutOfBounds();\\n    error PopFromEmptyArray();\\n    error OutputArrayTooSmall();\\n\\n    /// @dev Data struct containing raw mapping.\\n    struct Data {\\n        mapping(uint256 => uint256) _raw;\\n    }\\n\\n    /// @dev Length of array.\\n    function length(Data storage self) internal view returns (uint256) {\\n        return self._raw[0] >> 160;\\n    }\\n\\n    /// @dev Returns data item from `self` storage at `i`.\\n    function at(Data storage self, uint256 i) internal view returns (address) {\\n        return address(uint160(self._raw[i]));\\n    }\\n\\n    /// @dev Returns list of addresses from storage `self`.\\n    function get(Data storage self) internal view returns (address[] memory arr) {\\n        uint256 lengthAndFirst = self._raw[0];\\n        arr = new address[](lengthAndFirst >> 160);\\n        _get(self, arr, lengthAndFirst);\\n    }\\n\\n    /// @dev Puts list of addresses from `self` storage into `output` array.\\n    function get(Data storage self, address[] memory output) internal view returns (address[] memory) {\\n        return _get(self, output, self._raw[0]);\\n    }\\n\\n    function _get(\\n        Data storage self,\\n        address[] memory output,\\n        uint256 lengthAndFirst\\n    ) private view returns (address[] memory) {\\n        uint256 len = lengthAndFirst >> 160;\\n        if (len > output.length) revert OutputArrayTooSmall();\\n        if (len > 0) {\\n            output[0] = address(uint160(lengthAndFirst));\\n            unchecked {\\n                for (uint256 i = 1; i < len; i++) {\\n                    output[i] = address(uint160(self._raw[i]));\\n                }\\n            }\\n        }\\n        return output;\\n    }\\n\\n    /// @dev Array push back `account` operation on storage `self`.\\n    function push(Data storage self, address account) internal returns (uint256) {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) {\\n                self._raw[0] = (1 << 160) + uint160(account);\\n            } else {\\n                self._raw[0] = lengthAndFirst + (1 << 160);\\n                self._raw[len] = uint160(account);\\n            }\\n            return len + 1;\\n        }\\n    }\\n\\n    /// @dev Array pop back operation for storage `self`.\\n    function pop(Data storage self) internal {\\n        unchecked {\\n            uint256 lengthAndFirst = self._raw[0];\\n            uint256 len = lengthAndFirst >> 160;\\n            if (len == 0) revert PopFromEmptyArray();\\n            self._raw[len - 1] = 0;\\n            if (len > 1) {\\n                self._raw[0] = lengthAndFirst - (1 << 160);\\n            }\\n        }\\n    }\\n\\n    /// @dev Set element for storage `self` at `index` to `account`.\\n    function set(\\n        Data storage self,\\n        uint256 index,\\n        address account\\n    ) internal {\\n        uint256 len = length(self);\\n        if (index >= len) revert IndexOutOfBounds();\\n\\n        if (index == 0) {\\n            self._raw[0] = (len << 160) | uint160(account);\\n        } else {\\n            self._raw[index] = uint160(account);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x721a3cbb8590214dc6cf6cacaabdb7b78b0e2de93cf308230eea800b546b2bff\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"./AddressArray.sol\\\";\\n\\n/** @title Library that is using AddressArray library for AddressArray.Data\\n * and allows Set operations on address storage data:\\n * 1. add\\n * 2. remove\\n * 3. contains\\n */\\nlibrary AddressSet {\\n    using AddressArray for AddressArray.Data;\\n\\n    /** @dev Data struct from AddressArray.Data items\\n     * and lookup mapping address => index in data array.\\n     */\\n    struct Data {\\n        AddressArray.Data items;\\n        mapping(address => uint256) lookup;\\n    }\\n\\n    /// @dev Length of data storage.\\n    function length(Data storage s) internal view returns (uint256) {\\n        return s.items.length();\\n    }\\n\\n    /// @dev Returns data item from `s` storage at `index`.\\n    function at(Data storage s, uint256 index) internal view returns (address) {\\n        return s.items.at(index);\\n    }\\n\\n    /// @dev Returns true if storage `s` has `item`.\\n    function contains(Data storage s, address item) internal view returns (bool) {\\n        return s.lookup[item] != 0;\\n    }\\n\\n    /// @dev Adds `item` into storage `s` and returns true if successful.\\n    function add(Data storage s, address item) internal returns (bool) {\\n        if (s.lookup[item] > 0) {\\n            return false;\\n        }\\n        s.lookup[item] = s.items.push(item);\\n        return true;\\n    }\\n\\n    /// @dev Removes `item` from storage `s` and returns true if successful.\\n    function remove(Data storage s, address item) internal returns (bool) {\\n        uint256 index = s.lookup[item];\\n        if (index == 0) {\\n            return false;\\n        }\\n        if (index < s.items.length()) {\\n            unchecked {\\n                address lastItem = s.items.at(s.items.length() - 1);\\n                s.items.set(index - 1, lastItem);\\n                s.lookup[lastItem] = index;\\n            }\\n        }\\n        s.items.pop();\\n        delete s.lookup[item];\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x06af71720083e9d8d3e7b9994695f6867e676a4fa89f1a8c294f5fce32b2da12\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/RevertReasonForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\n/// @title Revert reason forwarder.\\nlibrary RevertReasonForwarder {\\n    /// @dev Forwards latest externall call revert.\\n    function reRevert() internal pure {\\n        // bubble up revert reason from latest external call\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, returndatasize())\\n            revert(ptr, returndatasize())\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x990c989e0ffba370a27b90b917a1cf86db79e370b9ba2b0f9076895b232744f8\",\"license\":\"MIT\"},\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\nimport \\\"../libraries/RevertReasonForwarder.sol\\\";\\n\\n/// @title Implements efficient safe methods for ERC20 interface.\\nlibrary SafeERC20 {\\n    error SafeTransferFailed();\\n    error SafeTransferFromFailed();\\n    error ForceApproveFailed();\\n    error SafeIncreaseAllowanceFailed();\\n    error SafeDecreaseAllowanceFailed();\\n    error SafePermitBadLength();\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bytes4 selector = token.transferFrom.selector;\\n        bool success;\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), from)\\n            mstore(add(data, 0x24), to)\\n            mstore(add(data, 0x44), amount)\\n            success := call(gas(), token, 0, data, 100, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n        if (!success) revert SafeTransferFromFailed();\\n    }\\n\\n    /// @dev Ensures method do not revert or return boolean `true`, admits call to non-smart-contract.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.transfer.selector, to, value)) {\\n            revert SafeTransferFailed();\\n        }\\n    }\\n\\n    /// @dev If `approve(from, to, amount)` fails, try to `approve(from, to, 0)` before retry.\\n    function forceApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if (!_makeCall(token, token.approve.selector, spender, value)) {\\n            if (\\n                !_makeCall(token, token.approve.selector, spender, 0) ||\\n                !_makeCall(token, token.approve.selector, spender, value)\\n            ) {\\n                revert ForceApproveFailed();\\n            }\\n        }\\n    }\\n\\n    /// @dev Allowance increase with safe math check.\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > type(uint256).max - allowance) revert SafeIncreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance + value);\\n    }\\n\\n    /// @dev Allowance decrease with safe math check.\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (value > allowance) revert SafeDecreaseAllowanceFailed();\\n        forceApprove(token, spender, allowance - value);\\n    }\\n\\n    /// @dev Calls either ERC20 or Dai `permit` for `token`, if unsuccessful forwards revert from external call.\\n    function safePermit(IERC20 token, bytes calldata permit) internal {\\n        if (!tryPermit(token, permit)) RevertReasonForwarder.reRevert();\\n    }\\n\\n    function tryPermit(IERC20 token, bytes calldata permit) internal returns(bool) {\\n        if (permit.length == 32 * 7) {\\n            return _makeCalldataCall(token, IERC20Permit.permit.selector, permit);\\n        }\\n        if (permit.length == 32 * 8) {\\n            return _makeCalldataCall(token, IDaiLikePermit.permit.selector, permit);\\n        }\\n        revert SafePermitBadLength();\\n    }\\n\\n    function _makeCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            mstore(add(data, 0x04), to)\\n            mstore(add(data, 0x24), amount)\\n            success := call(gas(), token, 0, data, 0x44, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n\\n    function _makeCalldataCall(\\n        IERC20 token,\\n        bytes4 selector,\\n        bytes calldata args\\n    ) private returns (bool success) {\\n        /// @solidity memory-safe-assembly\\n        assembly { // solhint-disable-line no-inline-assembly\\n            let len := add(4, args.length)\\n            let data := mload(0x40)\\n\\n            mstore(data, selector)\\n            calldatacopy(add(data, 0x04), args.offset, args.length)\\n            success := call(gas(), token, 0, data, len, 0x0, 0x20)\\n            if success {\\n                switch returndatasize()\\n                case 0 {\\n                    success := gt(extcodesize(token), 0)\\n                }\\n                default {\\n                    success := and(gt(returndatasize(), 31), eq(mload(0), 1))\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x11014aec6238c642e58667a3ace2bb16a165bfe7bb475047c971bafdb1da92d0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/PowerPod.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@1inch/delegating/contracts/FarmingDelegationPod.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\nimport \\\"./St1inch.sol\\\";\\n\\ncontract PowerPod is FarmingDelegationPod, VotingPowerCalculator, IVotable {\\n    uint256 private constant _MAX_SHARE_PODS = 3;\\n    uint256 private constant _SHARE_POD_GAS_LIMIT = 140_000;\\n\\n    constructor(string memory name_, string memory symbol_, St1inch st1inch)\\n        FarmingDelegationPod(name_, symbol_, st1inch, _MAX_SHARE_PODS, _SHARE_POD_GAS_LIMIT)\\n        VotingPowerCalculator(st1inch.expBase(), st1inch.origin())\\n    {}\\n\\n    function votingPowerOf(address account) external view virtual returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x1d1d6b5bd21bb707147774fd874cd90bd0da23e638bb1be5b97372a1674196d2\",\"license\":\"MIT\"},\"contracts/St1inch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/ERC20Pods.sol\\\";\\nimport \\\"@1inch/erc20-pods/contracts/Pod.sol\\\";\\nimport \\\"@1inch/solidity-utils/contracts/libraries/SafeERC20.sol\\\";\\nimport \\\"./helpers/VotingPowerCalculator.sol\\\";\\nimport \\\"./interfaces/IVotable.sol\\\";\\n\\n/**\\n * @title 1inch staking contract\\n * @notice The contract provides the following features: staking, delegation, farming\\n * How lock period works:\\n * - balances and voting power\\n * - Lock min and max\\n * - Add lock\\n * - earlyWithdrawal\\n * - penalty math\\n */\\ncontract St1inch is ERC20Pods, Ownable, VotingPowerCalculator, IVotable {\\n    using SafeERC20 for IERC20;\\n\\n    event EmergencyExitSet(bool status);\\n    event MaxLossRatioSet(uint256 ratio);\\n    event MinLockPeriodRatioSet(uint256 ratio);\\n    event FeeReceiverSet(address receiver);\\n    event DefaultFarmSet(address defaultFarm);\\n\\n    error ApproveDisabled();\\n    error TransferDisabled();\\n    error LockTimeMoreMaxLock();\\n    error LockTimeLessMinLock();\\n    error UnlockTimeHasNotCome();\\n    error StakeUnlocked();\\n    error MinLockPeriodRatioNotReached();\\n    error MinReturnIsNotMet();\\n    error MaxLossIsNotMet();\\n    error MaxLossOverflow();\\n    error LossIsTooBig();\\n    error RescueAmountIsTooLarge();\\n    error ExpBaseTooBig();\\n    error ExpBaseTooSmall();\\n    error DefaultFarmTokenMismatch();\\n    error DepositsDisabled();\\n    error ZeroAddress();\\n\\n    /// @notice The minimum allowed staking period\\n    uint256 public constant MIN_LOCK_PERIOD = 30 days;\\n    /// @notice The maximum allowed staking period\\n    /// @dev WARNING: It is not enough to change the constant only but voting power decrease curve should be revised also\\n    uint256 public constant MAX_LOCK_PERIOD = 2 * 365 days;\\n    /// @notice Voting power decreased to 1/_VOTING_POWER_DIVIDER after lock expires\\n    /// @dev WARNING: It is not enough to change the constant only but voting power decrease curve should be revised also\\n    uint256 private constant _VOTING_POWER_DIVIDER = 20;\\n    uint256 private constant _PODS_LIMIT = 5;\\n    /// @notice Maximum allowed gas spent by each attached pod. If there not enough gas for pod execution then\\n    /// transaction is reverted. If pod uses more gas then its execution is reverted silently, not affection the\\n    /// main transaction\\n    uint256 private constant _POD_CALL_GAS_LIMIT = 500_000;\\n    uint256 private constant _ONE = 1e9;\\n\\n    IERC20 public immutable oneInch;\\n\\n    /// @notice The stucture to store stake information for a staker\\n    struct Depositor {\\n        uint40 lockTime;    // Unix time in seconds\\n        uint40 unlockTime;  // Unix time in seconds\\n        uint176 amount;     // Staked 1inch token amount\\n    }\\n\\n    mapping(address => Depositor) public depositors;\\n\\n    uint256 public totalDeposits;\\n    bool public emergencyExit;\\n    uint256 public maxLossRatio;\\n    uint256 public minLockPeriodRatio;\\n    address public feeReceiver;\\n    address public defaultFarm;\\n\\n    /**\\n     * @notice Initializes the contract\\n     * @param oneInch_ The token to be staked\\n     * @param expBase_ The rate for the voting power decrease over time\\n     */\\n    constructor(IERC20 oneInch_, uint256 expBase_)\\n        ERC20Pods(_PODS_LIMIT, _POD_CALL_GAS_LIMIT)\\n        ERC20(\\\"Staking 1INCH v2\\\", \\\"st1INCH\\\")\\n        VotingPowerCalculator(expBase_, block.timestamp)\\n    {\\n        // voting power after MAX_LOCK_PERIOD should be equal to staked amount divided by _VOTING_POWER_DIVIDER\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD) * _VOTING_POWER_DIVIDER < 1e18) revert ExpBaseTooBig();\\n        if (_votingPowerAt(1e18, block.timestamp + MAX_LOCK_PERIOD + 1) * _VOTING_POWER_DIVIDER > 1e18) revert ExpBaseTooSmall();\\n        oneInch = oneInch_;\\n    }\\n\\n    /**\\n     * @notice Sets the new contract that would recieve early withdrawal fees\\n     * @param feeReceiver_ The receiver contract address\\n     */\\n    function setFeeReceiver(address feeReceiver_) external onlyOwner {\\n        if (feeReceiver_ == address(0)) revert ZeroAddress();\\n        feeReceiver = feeReceiver_;\\n        emit FeeReceiverSet(feeReceiver_);\\n    }\\n\\n    /**\\n     * @notice Sets the new farm that all staking users will automatically join after staking for reward farming\\n     * @param defaultFarm_ The farm contract address\\n     */\\n    function setDefaultFarm(address defaultFarm_) external onlyOwner {\\n        if (defaultFarm_ != address(0) && Pod(defaultFarm_).token() != this) revert DefaultFarmTokenMismatch();\\n        defaultFarm = defaultFarm_;\\n        emit DefaultFarmSet(defaultFarm_);\\n    }\\n\\n    /**\\n     * @notice Sets the maximum allowed loss ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * Example: maxLossRatio = 90% and 1000 staked 1inch tokens means that a user can execute early withdrawal only\\n     * if his loss is less than or equals 90% of his stake, which is 900 tokens. Thus, if a user loses 900 tokens he is allowed\\n     * to do early withdrawal and not if the loss is greater.\\n     * @param maxLossRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMaxLossRatio(uint256 maxLossRatio_) external onlyOwner {\\n        if (maxLossRatio_ > _ONE) revert MaxLossOverflow();\\n        maxLossRatio = maxLossRatio_;\\n        emit MaxLossRatioSet(maxLossRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the minimum allowed lock period ratio for early withdrawal. If the ratio is not met, actual is more than allowed,\\n     * then early withdrawal will revert.\\n     * @param minLockPeriodRatio_ The maximum loss allowed (9 decimals).\\n     */\\n    function setMinLockPeriodRatio(uint256 minLockPeriodRatio_) external onlyOwner {\\n        if (minLockPeriodRatio_ > _ONE) revert MaxLossOverflow();\\n        minLockPeriodRatio = minLockPeriodRatio_;\\n        emit MinLockPeriodRatioSet(minLockPeriodRatio_);\\n    }\\n\\n    /**\\n     * @notice Sets the emergency exit mode. In emergency mode any stake may withdraw its stake regardless of lock.\\n     * The mode is intended to use only for migration to a new version of staking contract.\\n     * @param emergencyExit_ set `true` to enter emergency exit mode and `false` to return to normal operations\\n     */\\n    function setEmergencyExit(bool emergencyExit_) external onlyOwner {\\n        emergencyExit = emergencyExit_;\\n        emit EmergencyExitSet(emergencyExit_);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power of the provided account\\n     * @param account The address of an account to get voting power for\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPowerOf(address account) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power of the provided account at the given timestamp\\n     * @dev To calculate voting power at any timestamp provided the contract stores each balance\\n     * as it was staked for the maximum lock time. If a staker locks its stake for less than the maximum\\n     * then at the moment of deposit its balance is recorded as it was staked for the maximum but time\\n     * equal to `max lock period-lock time` has passed. It makes available voting power calculation\\n     * available at any point in time within the maximum lock period.\\n     * @param account The address of an account to get voting power for\\n     * @param timestamp The timestamp to calculate voting power at\\n     * @return votingPower The voting power available at the moment of `timestamp`\\n     */\\n    function votingPowerOfAt(address account, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balanceOf(account), timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power for the provided balance at the current timestamp assuming that\\n     * the balance is a balance at the moment of the maximum lock time\\n     * @param balance The balance for the maximum lock time\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPower(uint256 balance) external view returns (uint256) {\\n        return _votingPowerAt(balance, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Gets the voting power for the provided balance at the current timestamp assuming that\\n     * the balance is a balance at the moment of the maximum lock time\\n     * @param balance The balance for the maximum lock time\\n     * @param timestamp The timestamp to calculate the voting power at\\n     * @return votingPower The voting power available at the block timestamp\\n     */\\n    function votingPowerAt(uint256 balance, uint256 timestamp) external view returns (uint256) {\\n        return _votingPowerAt(balance, timestamp);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount and locks it for the given duration\\n     * @param amount The amount of tokens to stake\\n     * @param duration The lock period in seconds. If there is a stake locked then the lock period is extended by the duration.\\n     * To keep the current lock period unchanged pass 0 for the duration.\\n     */\\n    function deposit(uint256 amount, uint256 duration) external {\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount and locks it for the given duration with permit\\n     * @param amount The amount of tokens to stake\\n     * @param duration The lock period in seconds. If there is a stake locked then the lock period is extended by the duration.\\n     * To keep the current lock period unchanged pass 0 for the duration\\n     * @param permit Permit given by the staker\\n     */\\n    function depositWithPermit(uint256 amount, uint256 duration, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(msg.sender, amount, duration);\\n    }\\n\\n\\n    /**\\n     * @notice Stakes given amount on behalf of provided account without locking or extending lock\\n     * @param account The account to stake for\\n     * @param amount The amount to stake\\n     */\\n    function depositFor(address account, uint256 amount) external {\\n        _deposit(account, amount, 0);\\n    }\\n\\n    /**\\n     * @notice Stakes given amount on behalf of provided account without locking or extending lock with permit\\n     * @param account The account to stake for\\n     * @param amount The amount to stake\\n     * @param permit Permit given by the caller\\n     */\\n    function depositForWithPermit(address account, uint256 amount, bytes calldata permit) external {\\n        oneInch.safePermit(permit);\\n        _deposit(account, amount, 0);\\n    }\\n\\n    function _deposit(address account, uint256 amount, uint256 duration) private {\\n        if (emergencyExit) revert DepositsDisabled();\\n        Depositor memory depositor = depositors[account]; // SLOAD\\n\\n        uint256 lockedTill = Math.max(depositor.unlockTime, block.timestamp) + duration;\\n        uint256 lockLeft = lockedTill - block.timestamp;\\n        if (lockLeft < MIN_LOCK_PERIOD) revert LockTimeLessMinLock();\\n        if (lockLeft > MAX_LOCK_PERIOD) revert LockTimeMoreMaxLock();\\n        uint256 balanceDiff = _balanceAt(depositor.amount + amount, lockedTill) / _VOTING_POWER_DIVIDER - balanceOf(account);\\n\\n        depositor.lockTime = uint40(duration == 0 ? depositor.lockTime : block.timestamp);\\n        depositor.unlockTime = uint40(lockedTill);\\n        depositor.amount += uint176(amount);\\n        depositors[account] = depositor; // SSTORE\\n        totalDeposits += amount;\\n        _mint(account, balanceDiff);\\n\\n        if (amount > 0) {\\n            oneInch.safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n\\n        if (defaultFarm != address(0) && !hasPod(account, defaultFarm)) {\\n            _addPod(account, defaultFarm);\\n        }\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake.\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    function earlyWithdraw(uint256 minReturn, uint256 maxLoss) external {\\n        earlyWithdrawTo(msg.sender, minReturn, maxLoss);\\n    }\\n\\n    /**\\n     * @notice Withdraw stake before lock period expires at the cost of losing part of a stake to the specified account\\n     * The stake loss is proportional to the time passed from the maximum lock period to the lock expiration and voting power.\\n     * The more time is passed the less would be the loss.\\n     * Formula to calculate return amount = (deposit - voting power)) / 0.95\\n     * @param to The account to withdraw the stake to\\n     * @param minReturn The minumum amount of stake acceptable for return. If actual amount is less then the transaction is reverted\\n     * @param maxLoss The maximum amount of loss acceptable. If actual loss is bigger then the transaction is reverted\\n     */\\n    // ret(balance) = (deposit - vp(balance)) / 0.95\\n    function earlyWithdrawTo(address to, uint256 minReturn, uint256 maxLoss) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (emergencyExit || block.timestamp >= depositor.unlockTime) revert StakeUnlocked();\\n        uint256 allowedExitTime = depositor.lockTime + (depositor.unlockTime - depositor.lockTime) * minLockPeriodRatio / _ONE;\\n        if (block.timestamp < allowedExitTime) revert MinLockPeriodRatioNotReached();\\n\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            uint256 balance = balanceOf(msg.sender);\\n            (uint256 loss, uint256 ret) = _earlyWithdrawLoss(amount, balance);\\n            if (ret < minReturn) revert MinReturnIsNotMet();\\n            if (loss > maxLoss) revert MaxLossIsNotMet();\\n            if (loss > amount * maxLossRatio / _ONE) revert LossIsTooBig();\\n\\n            _withdraw(depositor, balance);\\n            oneInch.safeTransfer(to, ret);\\n            oneInch.safeTransfer(feeReceiver, loss);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets the loss amount if the staker do early withdrawal at the current block\\n     * @param account The account to calculate early withdrawal loss for\\n     * @return loss The loss amount amount\\n     * @return ret The return amount\\n     * @return canWithdraw  True if the staker can withdraw without penalty, false otherwise\\n     */\\n    function earlyWithdrawLoss(address account) external view returns (uint256 loss, uint256 ret, bool canWithdraw) {\\n        uint256 amount = depositors[account].amount;\\n        (loss, ret) = _earlyWithdrawLoss(amount, balanceOf(account));\\n        canWithdraw = loss <= amount * maxLossRatio / _ONE;\\n    }\\n\\n    function _earlyWithdrawLoss(uint256 depAmount, uint256 stBalance) private view returns (uint256 loss, uint256 ret) {\\n        ret = (depAmount - _votingPowerAt(stBalance, block.timestamp)) * 100 / 95;\\n        loss = depAmount - ret;\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired\\n     */\\n    function withdraw() external {\\n        withdrawTo(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraws stake if lock period expired to the given address\\n     */\\n    function withdrawTo(address to) public {\\n        Depositor memory depositor = depositors[msg.sender]; // SLOAD\\n        if (!emergencyExit && block.timestamp < depositor.unlockTime) revert UnlockTimeHasNotCome();\\n\\n        uint256 amount = depositor.amount;\\n        if (amount > 0) {\\n            _withdraw(depositor, balanceOf(msg.sender));\\n            oneInch.safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _withdraw(Depositor memory depositor, uint256 balance) private {\\n        totalDeposits -= depositor.amount;\\n        depositor.amount = 0;\\n        // keep unlockTime in storage for next tx optimization\\n        depositor.unlockTime = uint40(Math.min(depositor.unlockTime, block.timestamp));\\n        depositors[msg.sender] = depositor; // SSTORE\\n        _burn(msg.sender, balance);\\n    }\\n\\n    /**\\n     * @notice Retrieves funds from the contract in emergency situations\\n     * @param token The token to retrieve\\n     * @param amount The amount of funds to transfer\\n     */\\n    function rescueFunds(IERC20 token, uint256 amount) external onlyOwner {\\n        if (address(token) == address(0)) {\\n            Address.sendValue(payable(msg.sender), amount);\\n        } else {\\n            if (token == oneInch) {\\n                if (amount > oneInch.balanceOf(address(this)) - totalDeposits) revert RescueAmountIsTooLarge();\\n            }\\n            token.safeTransfer(msg.sender, amount);\\n        }\\n    }\\n\\n    // ERC20 methods disablers\\n\\n    function approve(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function transfer(address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function transferFrom(address, address, uint256) public pure override(IERC20, ERC20) returns (bool) {\\n        revert TransferDisabled();\\n    }\\n\\n    function increaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n\\n    function decreaseAllowance(address, uint256) public pure override returns (bool) {\\n        revert ApproveDisabled();\\n    }\\n}\\n\",\"keccak256\":\"0xf943f1bb30f32caea79e36a922d0bd78595027ef501bc0aa42de033ddfa47c51\",\"license\":\"MIT\"},\"contracts/helpers/VotingPowerCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ncontract VotingPowerCalculator {\\n    error OriginInTheFuture();\\n\\n    uint256 private constant _ONE = 1e18;\\n\\n    uint256 public immutable origin;\\n    uint256 public immutable expBase;\\n\\n    uint256 private immutable _expTable0;\\n    uint256 private immutable _expTable1;\\n    uint256 private immutable _expTable2;\\n    uint256 private immutable _expTable3;\\n    uint256 private immutable _expTable4;\\n    uint256 private immutable _expTable5;\\n    uint256 private immutable _expTable6;\\n    uint256 private immutable _expTable7;\\n    uint256 private immutable _expTable8;\\n    uint256 private immutable _expTable9;\\n    uint256 private immutable _expTable10;\\n    uint256 private immutable _expTable11;\\n    uint256 private immutable _expTable12;\\n    uint256 private immutable _expTable13;\\n    uint256 private immutable _expTable14;\\n    uint256 private immutable _expTable15;\\n    uint256 private immutable _expTable16;\\n    uint256 private immutable _expTable17;\\n    uint256 private immutable _expTable18;\\n    uint256 private immutable _expTable19;\\n    uint256 private immutable _expTable20;\\n    uint256 private immutable _expTable21;\\n    uint256 private immutable _expTable22;\\n    uint256 private immutable _expTable23;\\n    uint256 private immutable _expTable24;\\n    uint256 private immutable _expTable25;\\n    uint256 private immutable _expTable26;\\n    uint256 private immutable _expTable27;\\n    uint256 private immutable _expTable28;\\n    uint256 private immutable _expTable29;\\n\\n    constructor(uint256 expBase_, uint256 origin_) {\\n        if (origin_ > block.timestamp) revert OriginInTheFuture();\\n\\n        origin = origin_;\\n        expBase = expBase_;\\n        _expTable0 = expBase_;\\n        _expTable1 = (_expTable0 * _expTable0) / _ONE;\\n        _expTable2 = (_expTable1 * _expTable1) / _ONE;\\n        _expTable3 = (_expTable2 * _expTable2) / _ONE;\\n        _expTable4 = (_expTable3 * _expTable3) / _ONE;\\n        _expTable5 = (_expTable4 * _expTable4) / _ONE;\\n        _expTable6 = (_expTable5 * _expTable5) / _ONE;\\n        _expTable7 = (_expTable6 * _expTable6) / _ONE;\\n        _expTable8 = (_expTable7 * _expTable7) / _ONE;\\n        _expTable9 = (_expTable8 * _expTable8) / _ONE;\\n        _expTable10 = (_expTable9 * _expTable9) / _ONE;\\n        _expTable11 = (_expTable10 * _expTable10) / _ONE;\\n        _expTable12 = (_expTable11 * _expTable11) / _ONE;\\n        _expTable13 = (_expTable12 * _expTable12) / _ONE;\\n        _expTable14 = (_expTable13 * _expTable13) / _ONE;\\n        _expTable15 = (_expTable14 * _expTable14) / _ONE;\\n        _expTable16 = (_expTable15 * _expTable15) / _ONE;\\n        _expTable17 = (_expTable16 * _expTable16) / _ONE;\\n        _expTable18 = (_expTable17 * _expTable17) / _ONE;\\n        _expTable19 = (_expTable18 * _expTable18) / _ONE;\\n        _expTable20 = (_expTable19 * _expTable19) / _ONE;\\n        _expTable21 = (_expTable20 * _expTable20) / _ONE;\\n        _expTable22 = (_expTable21 * _expTable21) / _ONE;\\n        _expTable23 = (_expTable22 * _expTable22) / _ONE;\\n        _expTable24 = (_expTable23 * _expTable23) / _ONE;\\n        _expTable25 = (_expTable24 * _expTable24) / _ONE;\\n        _expTable26 = (_expTable25 * _expTable25) / _ONE;\\n        _expTable27 = (_expTable26 * _expTable26) / _ONE;\\n        _expTable28 = (_expTable27 * _expTable27) / _ONE;\\n        _expTable29 = (_expTable28 * _expTable28) / _ONE;\\n    }\\n\\n    function _votingPowerAt(uint256 balance, uint256 timestamp) internal view returns (uint256 votingPower) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            votingPower = balance;\\n            if (t & 0x01 != 0) {\\n                votingPower = (votingPower * _expTable0) / _ONE;\\n            }\\n            if (t & 0x02 != 0) {\\n                votingPower = (votingPower * _expTable1) / _ONE;\\n            }\\n            if (t & 0x04 != 0) {\\n                votingPower = (votingPower * _expTable2) / _ONE;\\n            }\\n            if (t & 0x08 != 0) {\\n                votingPower = (votingPower * _expTable3) / _ONE;\\n            }\\n            if (t & 0x10 != 0) {\\n                votingPower = (votingPower * _expTable4) / _ONE;\\n            }\\n            if (t & 0x20 != 0) {\\n                votingPower = (votingPower * _expTable5) / _ONE;\\n            }\\n            if (t & 0x40 != 0) {\\n                votingPower = (votingPower * _expTable6) / _ONE;\\n            }\\n            if (t & 0x80 != 0) {\\n                votingPower = (votingPower * _expTable7) / _ONE;\\n            }\\n            if (t & 0x100 != 0) {\\n                votingPower = (votingPower * _expTable8) / _ONE;\\n            }\\n            if (t & 0x200 != 0) {\\n                votingPower = (votingPower * _expTable9) / _ONE;\\n            }\\n            if (t & 0x400 != 0) {\\n                votingPower = (votingPower * _expTable10) / _ONE;\\n            }\\n            if (t & 0x800 != 0) {\\n                votingPower = (votingPower * _expTable11) / _ONE;\\n            }\\n            if (t & 0x1000 != 0) {\\n                votingPower = (votingPower * _expTable12) / _ONE;\\n            }\\n            if (t & 0x2000 != 0) {\\n                votingPower = (votingPower * _expTable13) / _ONE;\\n            }\\n            if (t & 0x4000 != 0) {\\n                votingPower = (votingPower * _expTable14) / _ONE;\\n            }\\n            if (t & 0x8000 != 0) {\\n                votingPower = (votingPower * _expTable15) / _ONE;\\n            }\\n            if (t & 0x10000 != 0) {\\n                votingPower = (votingPower * _expTable16) / _ONE;\\n            }\\n            if (t & 0x20000 != 0) {\\n                votingPower = (votingPower * _expTable17) / _ONE;\\n            }\\n            if (t & 0x40000 != 0) {\\n                votingPower = (votingPower * _expTable18) / _ONE;\\n            }\\n            if (t & 0x80000 != 0) {\\n                votingPower = (votingPower * _expTable19) / _ONE;\\n            }\\n            if (t & 0x100000 != 0) {\\n                votingPower = (votingPower * _expTable20) / _ONE;\\n            }\\n            if (t & 0x200000 != 0) {\\n                votingPower = (votingPower * _expTable21) / _ONE;\\n            }\\n            if (t & 0x400000 != 0) {\\n                votingPower = (votingPower * _expTable22) / _ONE;\\n            }\\n            if (t & 0x800000 != 0) {\\n                votingPower = (votingPower * _expTable23) / _ONE;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                votingPower = (votingPower * _expTable24) / _ONE;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                votingPower = (votingPower * _expTable25) / _ONE;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                votingPower = (votingPower * _expTable26) / _ONE;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                votingPower = (votingPower * _expTable27) / _ONE;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                votingPower = (votingPower * _expTable28) / _ONE;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                votingPower = (votingPower * _expTable29) / _ONE;\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _balanceAt(uint256 votingPower, uint256 timestamp) internal view returns (uint256 balance) {\\n        timestamp = timestamp < origin ? origin : timestamp;  // logic in timestamps before origin is undefined\\n        unchecked {\\n            uint256 t = timestamp - origin;\\n            balance = votingPower;\\n            if (t & 0x01 != 0) {\\n                balance = (balance * _ONE) / _expTable0;\\n            }\\n            if (t & 0x02 != 0) {\\n                balance = (balance * _ONE) / _expTable1;\\n            }\\n            if (t & 0x04 != 0) {\\n                balance = (balance * _ONE) / _expTable2;\\n            }\\n            if (t & 0x08 != 0) {\\n                balance = (balance * _ONE) / _expTable3;\\n            }\\n            if (t & 0x10 != 0) {\\n                balance = (balance * _ONE) / _expTable4;\\n            }\\n            if (t & 0x20 != 0) {\\n                balance = (balance * _ONE) / _expTable5;\\n            }\\n            if (t & 0x40 != 0) {\\n                balance = (balance * _ONE) / _expTable6;\\n            }\\n            if (t & 0x80 != 0) {\\n                balance = (balance * _ONE) / _expTable7;\\n            }\\n            if (t & 0x100 != 0) {\\n                balance = (balance * _ONE) / _expTable8;\\n            }\\n            if (t & 0x200 != 0) {\\n                balance = (balance * _ONE) / _expTable9;\\n            }\\n            if (t & 0x400 != 0) {\\n                balance = (balance * _ONE) / _expTable10;\\n            }\\n            if (t & 0x800 != 0) {\\n                balance = (balance * _ONE) / _expTable11;\\n            }\\n            if (t & 0x1000 != 0) {\\n                balance = (balance * _ONE) / _expTable12;\\n            }\\n            if (t & 0x2000 != 0) {\\n                balance = (balance * _ONE) / _expTable13;\\n            }\\n            if (t & 0x4000 != 0) {\\n                balance = (balance * _ONE) / _expTable14;\\n            }\\n            if (t & 0x8000 != 0) {\\n                balance = (balance * _ONE) / _expTable15;\\n            }\\n            if (t & 0x10000 != 0) {\\n                balance = (balance * _ONE) / _expTable16;\\n            }\\n            if (t & 0x20000 != 0) {\\n                balance = (balance * _ONE) / _expTable17;\\n            }\\n            if (t & 0x40000 != 0) {\\n                balance = (balance * _ONE) / _expTable18;\\n            }\\n            if (t & 0x80000 != 0) {\\n                balance = (balance * _ONE) / _expTable19;\\n            }\\n            if (t & 0x100000 != 0) {\\n                balance = (balance * _ONE) / _expTable20;\\n            }\\n            if (t & 0x200000 != 0) {\\n                balance = (balance * _ONE) / _expTable21;\\n            }\\n            if (t & 0x400000 != 0) {\\n                balance = (balance * _ONE) / _expTable22;\\n            }\\n            if (t & 0x800000 != 0) {\\n                balance = (balance * _ONE) / _expTable23;\\n            }\\n            if (t & 0x1000000 != 0) {\\n                balance = (balance * _ONE) / _expTable24;\\n            }\\n            if (t & 0x2000000 != 0) {\\n                balance = (balance * _ONE) / _expTable25;\\n            }\\n            if (t & 0x4000000 != 0) {\\n                balance = (balance * _ONE) / _expTable26;\\n            }\\n            if (t & 0x8000000 != 0) {\\n                balance = (balance * _ONE) / _expTable27;\\n            }\\n            if (t & 0x10000000 != 0) {\\n                balance = (balance * _ONE) / _expTable28;\\n            }\\n            if (t & 0x20000000 != 0) {\\n                balance = (balance * _ONE) / _expTable29;\\n            }\\n        }\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x6f21d9315cc46a7ca6619fdd98c170f04e9fe4e7e05a02880df13dfd8aec57cb\",\"license\":\"MIT\"},\"contracts/interfaces/IVotable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotable is IERC20 {\\n    /// @dev we assume that voting power is a function of balance that preserves order\\n    function votingPowerOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d7bd805a3d022454412a535bfd849b9e364548e77a82fffcd06590681d3d2e4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6104e06040523480156200001257600080fd5b5060405162006ab638038062006ab68339810160408190526200003591620006dd565b806001600160a01b031663bca9c3fc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200009a91906200076a565b816001600160a01b031663938b5f326040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ff91906200076a565b6001600160a01b0383166080528484846003620222e084848484848484848282866200012c838262000813565b5060046200013b828262000813565b50505060a094909452505060c0525050504287111595506200017694505050505057604051635a59719b60e01b815260040160405180910390fd5b60e0819052610100829052610120829052670de0b6b3a76400006200019c8380620008df565b620001a891906200090b565b610140819052670de0b6b3a764000090620001c49080620008df565b620001d091906200090b565b610160819052670de0b6b3a764000090620001ec9080620008df565b620001f891906200090b565b610180819052670de0b6b3a764000090620002149080620008df565b6200022091906200090b565b6101a0819052670de0b6b3a7640000906200023c9080620008df565b6200024891906200090b565b6101c0819052670de0b6b3a764000090620002649080620008df565b6200027091906200090b565b6101e0819052670de0b6b3a7640000906200028c9080620008df565b6200029891906200090b565b610200819052670de0b6b3a764000090620002b49080620008df565b620002c091906200090b565b610220819052670de0b6b3a764000090620002dc9080620008df565b620002e891906200090b565b610240819052670de0b6b3a764000090620003049080620008df565b6200031091906200090b565b610260819052670de0b6b3a7640000906200032c9080620008df565b6200033891906200090b565b610280819052670de0b6b3a764000090620003549080620008df565b6200036091906200090b565b6102a0819052670de0b6b3a7640000906200037c9080620008df565b6200038891906200090b565b6102c0819052670de0b6b3a764000090620003a49080620008df565b620003b091906200090b565b6102e0819052670de0b6b3a764000090620003cc9080620008df565b620003d891906200090b565b610300819052670de0b6b3a764000090620003f49080620008df565b6200040091906200090b565b610320819052670de0b6b3a7640000906200041c9080620008df565b6200042891906200090b565b610340819052670de0b6b3a764000090620004449080620008df565b6200045091906200090b565b610360819052670de0b6b3a7640000906200046c9080620008df565b6200047891906200090b565b610380819052670de0b6b3a764000090620004949080620008df565b620004a091906200090b565b6103a0819052670de0b6b3a764000090620004bc9080620008df565b620004c891906200090b565b6103c0819052670de0b6b3a764000090620004e49080620008df565b620004f091906200090b565b6103e0819052670de0b6b3a7640000906200050c9080620008df565b6200051891906200090b565b610400819052670de0b6b3a764000090620005349080620008df565b6200054091906200090b565b610420819052670de0b6b3a7640000906200055c9080620008df565b6200056891906200090b565b610440819052670de0b6b3a764000090620005849080620008df565b6200059091906200090b565b610460819052670de0b6b3a764000090620005ac9080620008df565b620005b891906200090b565b610480819052670de0b6b3a764000090620005d49080620008df565b620005e091906200090b565b6104a0819052670de0b6b3a764000090620005fc9080620008df565b6200060891906200090b565b6104c052506200092e9350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200064057600080fd5b81516001600160401b03808211156200065d576200065d62000618565b604051601f8301601f19908116603f0116810190828211818310171562000688576200068862000618565b81604052838152602092508683858801011115620006a557600080fd5b600091505b83821015620006c95785820183015181830184015290820190620006aa565b600093810190920192909252949350505050565b600080600060608486031215620006f357600080fd5b83516001600160401b03808211156200070b57600080fd5b62000719878388016200062e565b945060208601519150808211156200073057600080fd5b506200073f868287016200062e565b604086015190935090506001600160a01b03811681146200075f57600080fd5b809150509250925092565b6000602082840312156200077d57600080fd5b5051919050565b600181811c908216806200079957607f821691505b602082108103620007ba57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200080e57600081815260208120601f850160051c81016020861015620007e95750805b601f850160051c820191505b818110156200080a57828155600101620007f5565b5050505b505050565b81516001600160401b038111156200082f576200082f62000618565b620008478162000840845462000784565b84620007c0565b602080601f8311600181146200087f5760008415620008665750858301515b600019600386901b1c1916600185901b1785556200080a565b600085815260208120601f198616915b82811015620008b0578886015182559484019460019091019084016200088f565b5085821015620008cf5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820281158282048414176200090557634e487b7160e01b600052601160045260246000fd5b92915050565b6000826200092957634e487b7160e01b600052601260045260246000fd5b500490565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a0516103c0516103e05161040051610420516104405161046051610480516104a0516104c051615fc862000aee60003960006114be015260006114810152600061144401526000611407015260006113ca0152600061138d0152600061135001526000611314015260006112d80152600061129c0152600061126001526000611224015260006111e8015260006111ac0152600061117001526000611135015260006110fa015260006110bf01526000611084015260006110490152600061100e01526000610fd301526000610f9801526000610f5e01526000610f2401526000610eea01526000610eb001526000610e7601526000610e3c01526000610e020152600061040a01526000818161036601528181610d7601528181610da50152610dcc0152600081816103e20152610b540152600081816102d70152610b330152600081816104cb01528181610a1e01526115db0152615fc86000f3fe60806040523480156200001157600080fd5b5060043610620001b95760003560e01c80637a1f1aa911620000f5578063b74c3b301162000097578063dd62ed3e116200006e578063dd62ed3e1462000443578063f3598ad9146200048c578063fc0c546a14620004c557600080fd5b8063b74c3b3014620003dc578063bca9c3fc1462000404578063bcc3f3bd146200042c57600080fd5b8063a457c2d711620000cc578063a457c2d7146200023f578063a9059cbb1462000392578063b04807ec14620003a357600080fd5b80637a1f1aa91462000349578063938b5f32146200036057806395d89b41146200038857600080fd5b806339509351116200015f5780634d5f8b6311620001365780634d5f8b6314620002d15780635c19a95c14620002f957806370a08231146200031057600080fd5b806339509351146200023f5780633c3f3c2314620002a15780633ffbd47f14620002ba57600080fd5b806318160ddd116200019457806318160ddd146200026757806323b872dd146200027a578063313ce567146200029157600080fd5b806306fdde0314620001be5780630840605a14620001e0578063095ea7b3146200023f575b600080fd5b620001c8620004ed565b604051620001d7919062001e5e565b60405180910390f35b62000219620001f136600462001e9d565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620001d7565b620002566200025036600462001ebd565b62000587565b6040519015158152602001620001d7565b6002545b604051908152602001620001d7565b620002566200028b36600462001eec565b620005bb565b60405160128152602001620001d7565b620002b8620002b236600462001e9d565b620005ef565b005b62000219620002cb36600462002014565b620007ea565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b620002b86200030a36600462001e9d565b6200092b565b6200026b6200032136600462001e9d565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b620002b86200035a36600462001eec565b62000a06565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b620001c862000a88565b620002566200028b36600462001ebd565b62000219620003b436600462001e9d565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b6200026b6200043d36600462001e9d565b62000a99565b6200026b620004543660046200207f565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b620002196200049d36600462001e9d565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002197f000000000000000000000000000000000000000000000000000000000000000081565b606060038054620004fe90620020bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200052c90620020bd565b80156200057d5780601f1062000551576101008083540402835291602001916200057d565b820191906000526020600020905b8154815290600101906020018083116200055f57829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205473ffffffffffffffffffffffffffffffffffffffff166200064c576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116158015906200072b5750336000908152600660209081526040918290205482517ffc0c546a000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff918216939185169263fc0c546a92600480820193918290030181865afa158015620006ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000712919062002112565b73ffffffffffffffffffffffffffffffffffffffff1614155b1562000763576040517fb599ae3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851690811790915591519182527fdd367fa3b0132bc9c4680deca3d4565375dda9ed37c98f8321370efe4594785a910160405180910390a150565b6000620007f8838362000ad1565b905060008160036040516200080d9062001ddc565b73ffffffffffffffffffffffffffffffffffffffff90921682526020820152604001604051809103906000f0801580156200084c573d6000803e3d6000fd5b506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90602401600060405180830381600087803b158015620008b857600080fd5b505af1158015620008cd573d6000803e3d6000fd5b505033600090815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff949094169390931790925550909392505050565b620009368162000c38565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526007602052604090205416801562000a025773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517ff70f6a9a000000000000000000000000000000000000000000000000000000008152336004820152838316602482015291169063f70f6a9a90604401600060405180830381600087803b158015620009e857600080fd5b505af1158015620009fd573d6000803e3d6000fd5b505050505b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000a76576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000a8383838362000cc9565b505050565b606060048054620004fe90620020bd565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081205462000acb904262000d72565b92915050565b3360009081526006602052604081205473ffffffffffffffffffffffffffffffffffffffff161562000b2f576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060405162000b819062001dea565b62000b90949392919062002132565b604051809103906000f08015801562000bad573d6000803e3d6000fd5b503360008181526006602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905590519182529192507fb2bd819aacce2076359caf6d49d9ac5252134cffdffe026bf4ad781dc3847790910160405180910390a192915050565b73ffffffffffffffffffffffffffffffffffffffff81161580159062000c83575073ffffffffffffffffffffffffffffffffffffffff81811660009081526006602052604090205416155b1562000cbb576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000cc681620014ea565b50565b62000a83838373ffffffffffffffffffffffffffffffffffffffff82161562000d1a5773ffffffffffffffffffffffffffffffffffffffff8087166000908152600560205260409020541662000d1d565b60005b73ffffffffffffffffffffffffffffffffffffffff86161562000d685773ffffffffffffffffffffffffffffffffffffffff8087166000908152600560205260409020541662000d6b565b60005b8562001671565b60007f0000000000000000000000000000000000000000000000000000000000000000821062000da3578162000dc5565b7f00000000000000000000000000000000000000000000000000000000000000005b91508290507f00000000000000000000000000000000000000000000000000000000000000008203600181161562000e2757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600281161562000e6157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600481161562000e9b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600881161562000ed557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b601081161562000f0f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b602081161562000f4957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b604081161562000f8357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b608081161562000fbd57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61010081161562000ff857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6102008116156200103357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6104008116156200106e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610800811615620010a957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b611000811615620010e457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6120008116156200111f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6140008116156200115a57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6180008116156200119557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62010000811615620011d157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620200008116156200120d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620400008116156200124957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620800008116156200128557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62100000811615620012c157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62200000811615620012fd57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b624000008116156200133957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b628000008116156200137557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6301000000811615620013b257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6302000000811615620013ef57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63040000008116156200142c57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63080000008116156200146957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6310000000811615620014a657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6320000000811615620014e357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b5092915050565b3360009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff908116908216811462000a02573360008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251938452908301527f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2910160405180910390a16040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa15801562001638573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200165e91906200216f565b9050801562000a835762000a8333338486855b620016808585858585620017fd565b73ffffffffffffffffffffffffffffffffffffffff8316156200173b5773ffffffffffffffffffffffffffffffffffffffff838116600090815260066020526040908190205490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101849052911690639dc29fac90604401600060405180830381600087803b1580156200172157600080fd5b505af115801562001736573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff821615620017f65773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015620017dc57600080fd5b505af1158015620017f1573d6000803e3d6000fd5b505050505b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156200183a5750600081115b15620017f65773ffffffffffffffffffffffffffffffffffffffff83166200186e57620018688282620018a3565b620017f6565b73ffffffffffffffffffffffffffffffffffffffff821662001896576200186883826200199e565b620017f683838362001b66565b73ffffffffffffffffffffffffffffffffffffffff821662001926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546200193a919062002189565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821662001a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101562001afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831662001c0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff821662001cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101562001d68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b611fbb80620021c583390190565b611e13806200418083390190565b6000815180845260005b8181101562001e205760208185018101518683018201520162001e02565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600062001e73602083018462001df8565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811462000cc657600080fd5b60006020828403121562001eb057600080fd5b813562001e738162001e7a565b6000806040838503121562001ed157600080fd5b823562001ede8162001e7a565b946020939093013593505050565b60008060006060848603121562001f0257600080fd5b833562001f0f8162001e7a565b9250602084013562001f218162001e7a565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262001f7357600080fd5b813567ffffffffffffffff8082111562001f915762001f9162001f32565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562001fda5762001fda62001f32565b8160405283815286602085880101111562001ff457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200202857600080fd5b823567ffffffffffffffff808211156200204157600080fd5b6200204f8683870162001f61565b935060208501359150808211156200206657600080fd5b50620020758582860162001f61565b9150509250929050565b600080604083850312156200209357600080fd5b8235620020a08162001e7a565b91506020830135620020b28162001e7a565b809150509250929050565b600181811c90821680620020d257607f821691505b6020821081036200210c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156200212557600080fd5b815162001e738162001e7a565b60808152600062002147608083018762001df8565b82810360208401526200215b818762001df8565b604084019590955250506060015292915050565b6000602082840312156200218257600080fd5b5051919050565b8082018082111562000acb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60c06040523480156200001157600080fd5b5060405162001fbb38038062001fbb8339810160408190526200003491620000f8565b6001600160a01b0382166080526200004c33620000a8565b60058111156200007657604051632c22366560e11b81526004810182905260240160405180910390fd5b6001600160a01b0382166200009e5760405163d0af4eb760e01b815260040160405180910390fd5b60a0525062000134565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156200010c57600080fd5b82516001600160a01b03811681146200012457600080fd5b6020939093015192949293505050565b60805160a051611e37620001846000396000818161023d015261056901526000818161036b015281816103ca01528181610492015281816106250152818161085601526109080152611e376000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806378e3214f116100b2578063bfe1092811610081578063e6235ba711610066578063e6235ba714610340578063f2fde38b14610353578063fc0c546a1461036657600080fd5b8063bfe109281461030d578063cd00671b1461032b57600080fd5b806378e3214f146102955780637a1f1aa9146102a85780638da5cb5b146102bb578063b1bd3517146102fa57600080fd5b80634e71d92d116100ee5780634e71d92d1461025f57806366fa3e1e14610267578063715018a61461027a57806375619ab51461028257600080fd5b806318160ddd146101205780631e83409a146101375780632915cbec1461014c5780633717a68914610238575b600080fd5b6002545b6040519081526020015b60405180910390f35b61014a610145366004611ac6565b610393565b005b6101f061015a366004611ac6565b60408051606080820183526000808352602080840182905292840181905273ffffffffffffffffffffffffffffffffffffffff9490941684526003825292829020825193840183525464ffffffffff8116845265010000000000810463ffffffff16918401919091526901000000000000000000900476ffffffffffffffffffffffffffffffffffffffffffffff169082015290565b60408051825164ffffffffff16815260208084015163ffffffff16908201529181015176ffffffffffffffffffffffffffffffffffffffffffffff169082015260600161012e565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b61014a61045b565b61014a610275366004611ac6565b61055f565b61014a61067d565b61014a610290366004611ac6565b610691565b61014a6102a3366004611ae3565b610788565b61014a6102b6366004611b0f565b61083e565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012e565b610124610308366004611b50565b6108b8565b60015473ffffffffffffffffffffffffffffffffffffffff166102d5565b610333610994565b60405161012e9190611b89565b61014a61034e366004611be3565b6109a5565b61014a610361366004611ac6565b610aeb565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a9190611c18565b9050610457823383610ba7565b5050565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190611c18565b905060006105206004610bd1565b905060005b815181101561055a5761055282828151811061054357610543611c31565b60200260200101513385610ba7565b600101610525565b505050565b610567610c3e565b7f00000000000000000000000000000000000000000000000000000000000000006105926004610cbf565b036105c9576040517f62bc61f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d4600482610cd6565b61060a576040517f4c95008300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081168252831660208201527f6bff9ddd187ef283e9c7726f406ab27bcc3719a41b6bee3585c7447183cffcec910160405180910390a150565b610685610c3e565b61068f6000610d47565b565b610699610c3e565b60015473ffffffffffffffffffffffffffffffffffffffff9081169082168190036106f0576040517f8750ee9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084168252841660208201527fa9f739537fc57540bed0a44e33e27baa63290d865cc15f0f16cf17d38c998a4d910160405180910390a150600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107d9576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610817576001546104579073ffffffffffffffffffffffffffffffffffffffff1682610dbc565b6001546104579073ffffffffffffffffffffffffffffffffffffffff848116911683610f16565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ad576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61055a838383610f78565b6040517f3466a88600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690633466a88690604401602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190611c18565b905061098a838261098387611036565b9190611086565b9150505b92915050565b60606109a06004610bd1565b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109f6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902054610a52576040517f24060f4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a698383610a6287611036565b91906110ae565b6040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018390529081018490529091507f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec84749060600160405180910390a1610ae573ffffffffffffffffffffffffffffffffffffffff8516333086611139565b50505050565b610af3610c3e565b73ffffffffffffffffffffffffffffffffffffffff8116610b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610ba481610d47565b50565b6000610bbe8383610bb787611036565b91906111d6565b90508015610ae557610ae5848483611222565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610c0057610c00611c60565b604051908082528060200260200182016040528015610c29578160200160208202803683370190505b509150610c37838383611243565b5050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b92565b60008080526020829052604081205460a01c61098e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415610d0b5750600061098e565b610d15838361132c565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80471015610e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b92565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e80576040519150601f19603f3d011682016040523d82523d6000602084013e610e85565b606091505b505090508061055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b92565b610f42837fa9059cbb0000000000000000000000000000000000000000000000000000000084846113f4565b61055a576040517ffb7f507900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f846004610bd1565b905060005b8151811015610fca57610fc2858585610fba868681518110610fad57610fad611c31565b6020026020010151611036565b929190611447565b600101610f89565b5073ffffffffffffffffffffffffffffffffffffffff8416610ffe578160026000828254610ff89190611cbe565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8316610ae557816002600082825461102b9190611cd1565b909155505050505050565b604080518082018252611a9c81526000602080830182905273ffffffffffffffffffffffffffffffffffffffff851682526003815290839020835180850190945261038d8452908301529061098e565b60006110a6838361109687611467565b6020880151600101929190611489565b949350505050565b6000806110bc856020015190565b90506111256110ca86611467565b600183019064ffffffffff42167affffffffffffffffffffffffffffffffffffffffffffffffffffff90911665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016179055565b6111308185856114d9565b95945050505050565b60006323b872dd60e01b905060006040518281528560048201528460248201528360448201526020600060648360008b5af19150508015611197573d801561118d57600160005114601f3d11169150611195565b6000873b1191505b505b806111ce576040517ff405907100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000806111e4856020015190565b905060006111f186611467565b905061120260018301868684611489565b925082156112195761121960018301868684611715565b50509392505050565b61055a73ffffffffffffffffffffffffffffffffffffffff84168383610f16565b815160609060a083901c90811115611287576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156113235782846000815181106112a1576112a1611c31565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156113215760008181526020879052604090205485518690839081106112f4576112f4611c31565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016112c9565b505b50919392505050565b60008080526020839052604081205460a081901c8083036113a157600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8716011690556113e9565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b60006040518481528360048201528260248201526020600060448360008a5af191505080156110a6573d801561143657600160005114601f3d1116915061143e565b6000863b1191505b50949350505050565b610ae583838361145688611467565b60208901516001019392919061174e565b600061098e826118aa6118e461147e866020015190565b600101929190611979565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600185016020526040812054670de0b6b3a7640000906114c58486611ce4565b6114cf9190611cfb565b6111309190611d51565b600081600003611515576040517f68d5686e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff821115611553576040517f426a107300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6d04ee2d6d415b85acef810000000083111561159b576040517f0625040100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252855464ffffffffff811680835265010000000000820463ffffffff166020840152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16928201929092529042101561166e57670de0b6b3a764000061162f82836020015163ffffffff1684600001516116239190611d8c565b64ffffffffff166119f9565b6116399190611d51565b816040015176ffffffffffffffffffffffffffffffffffffffffffffff166116619190611cd1565b61166b9085611cbe565b93505b6116788342611cbe565b855464ffffffffff908116690100000000000000000076ffffffffffffffffffffffffffffffffffffffffffffff8816027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff16176501000000000063ffffffff9690961695909502949094177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001693169290921790935550919050565b61171f8183611ce4565b73ffffffffffffffffffffffffffffffffffffffff909316600090815260019094016020525050604090912055565b73ffffffffffffffffffffffffffffffffffffffff848116159084161583158015906117a657508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b156118a15781806117b45750805b1561180d577fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000650100000000007affffffffffffffffffffffffffffffffffffffffffffffffffffff851602164264ffffffffff161787555b60006118198486611ce4565b90508261185d5773ffffffffffffffffffffffffffffffffffffffff8716600090815260018901602052604081208054839290611857908490611cfb565b90915550505b8161189f5773ffffffffffffffffffffffffffffffffffffffff8616600090815260018901602052604081208054839290611899908490611daa565b90915550505b505b50505050505050565b6000806118cb8360408051808201909152611a9c8152600060208201525090565b90506118dd816000015163ffffffff16565b9392505050565b6000806119058460408051808201909152611a9c8152600060208201525090565b905061098a83611916836020015190565b60408051606081018252915464ffffffffff8116835265010000000000810463ffffffff9081166020850152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16918301919091529091906119f916565b835460009064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff164282146119ef5760006119c3878763ffffffff16565b905080156119ed57806119da88858863ffffffff16565b816119e7576119e7611d22565b04820191505b505b9695505050505050565b602082015160009063ffffffff161561098e576000611a2383856000015164ffffffffff16611a86565b611a3842866000015164ffffffffff16611a86565b039050836020015163ffffffff16670de0b6b3a7640000856040015176ffffffffffffffffffffffffffffffffffffffffffffff1683020281611a7d57611a7d611d22565b0491505061098e565b6000818310611a9557816118dd565b5090919050565b61068f611dd2565b73ffffffffffffffffffffffffffffffffffffffff81168114610ba457600080fd5b600060208284031215611ad857600080fd5b81356118dd81611aa4565b60008060408385031215611af657600080fd5b8235611b0181611aa4565b946020939093013593505050565b600080600060608486031215611b2457600080fd5b8335611b2f81611aa4565b92506020840135611b3f81611aa4565b929592945050506040919091013590565b60008060408385031215611b6357600080fd5b8235611b6e81611aa4565b91506020830135611b7e81611aa4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611bd757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611ba5565b50909695505050505050565b600080600060608486031215611bf857600080fd5b8335611c0381611aa4565b95602085013595506040909401359392505050565b600060208284031215611c2a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561098e5761098e611c8f565b8181038181111561098e5761098e611c8f565b808202811582820484141761098e5761098e611c8f565b8181036000831280158383131683831282161715611d1b57611d1b611c8f565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b64ffffffffff828116828216039080821115611d1b57611d1b611c8f565b8082018281126000831280158216821582161715611dca57611dca611c8f565b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122033d2e53b7d8d7fef22ac60ee554dd5c92e09220b60eab4ee92937f19f8b38d7864736f6c6343000811003360e06040523480156200001157600080fd5b5060405162001e1338038062001e13833981016040819052620000349162000178565b81818585600362000046838262000281565b50600462000055828262000281565b505050816000036200007a576040516337f1632160e11b815260040160405180910390fd5b608082905260a08190526200009c6005620000ad602090811b6200084b17901c565b50503360c052506200034d92505050565b60019055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000db57600080fd5b81516001600160401b0380821115620000f857620000f8620000b3565b604051601f8301601f19908116603f01168101908282118183101715620001235762000123620000b3565b816040528381526020925086838588010111156200014057600080fd5b600091505b8382101562000164578582018301518183018401529082019062000145565b600093810190920192909252949350505050565b600080600080608085870312156200018f57600080fd5b84516001600160401b0380821115620001a757600080fd5b620001b588838901620000c9565b95506020870151915080821115620001cc57600080fd5b50620001db87828801620000c9565b604087015160609097015195989097509350505050565b600181811c908216806200020757607f821691505b6020821081036200022857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027c57600081815260208120601f850160051c81016020861015620002575750805b601f850160051c820191505b81811015620002785782815560010162000263565b5050505b505050565b81516001600160401b038111156200029d576200029d620000b3565b620002b581620002ae8454620001f2565b846200022e565b602080601f831160018114620002ed5760008415620002d45750858301515b600019600386901b1c1916600185901b17855562000278565b600085815260208120601f198616915b828110156200031e57888601518255948401946001909101908401620002fd565b50858210156200033d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051611a7a62000399600039600081816105760152818161072701526107dc015260008181610318015261113d01526000818161029d0152610b180152611a7a6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e3578063a457c2d71161008c578063dd62ed3e11610066578063dd62ed3e14610350578063f55f545c14610396578063f70f6a9a146103b657600080fd5b8063a457c2d7146101bb578063a9059cbb1461033a578063ada6f64b1461034857600080fd5b806395d89b41116100bd57806395d89b41146102f85780639dc29fac14610300578063a44282dc1461031357600080fd5b806370a08231146102bf5780637a3e60e9146102d25780638da031df146102e557600080fd5b80633466a8861161014557806340f99a941161011f57806340f99a941461024d578063538db9231461028557806366b0dede1461029857600080fd5b80633466a8861461022757806339509351146101bb57806340c10f191461023a57600080fd5b8063222d6b4d11610176578063222d6b4d146101f057806323b872dd14610205578063313ce5671461021857600080fd5b806306fdde031461019d578063095ea7b3146101bb57806318160ddd146101de575b600080fd5b6101a56103c9565b6040516101b291906117bc565b60405180910390f35b6101ce6101c9366004611851565b61045b565b60405190151581526020016101b2565b6002545b6040519081526020016101b2565b6102036101fe36600461187b565b61048f565b005b6101ce610213366004611896565b61049c565b604051601281526020016101b2565b6101e26102353660046118d2565b6104d0565b610203610248366004611851565b61055e565b61026061025b366004611851565b6105db565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b2565b61020361029336600461187b565b610613565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b6101e26102cd36600461187b565b61061d565b6101e26102e036600461187b565b610692565b6101ce6102f33660046118d2565b6106c0565b6101a5610700565b61020361030e366004611851565b61070f565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b6101ce610213366004611851565b610203610788565b6101e261035e3660046118d2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6103a96103a436600461187b565b610793565b6040516101b29190611905565b6102036103c43660046118d2565b6107c4565b6060600380546103d89061195f565b80601f01602080910402602001604051908101604052809291908181526020018280546104049061195f565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104993382610851565b50565b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060056104df815460021490565b15610516576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61052083856106c0565b156105525773ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020549150610557565b600091505b5092915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105cd576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d7828261092b565b5050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812061060a9083610a2b565b90505b92915050565b6104993382610a3f565b6000600561062c815460021490565b15610663576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491505b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812061060d90610be9565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260066020908152604080832093851683526001909301905290812054151561060a565b6060600480546103d89061195f565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461077e576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d78282610c00565b61079133610dcb565b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061060d90610f53565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610833576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083d82826106c0565b6105d7576105d78282610a3f565b60019055565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206108809082610fc0565b6108b6576040517f826fbca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8085168252831660208201527fb94b1adfafd33f45e2ba5c713871f026dc1ef0fdc3d75b4f24e954f15b9f8e64910160405180910390a160006109118361061d565b905080156109265761092682846000846110db565b505050565b73ffffffffffffffffffffffffffffffffffffffff82166109ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546109bf91906119ac565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105d76000838361118a565b60008181526020839052604081205461060a565b73ffffffffffffffffffffffffffffffffffffffff8116610a8c576040517f960357e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020610abb90826113c6565b610af1576040517fcbdb297300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090207f000000000000000000000000000000000000000000000000000000000000000090610b4190610be9565b1115610b79576040517fc87e91a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8085168252831660208201527fde03e097fdd335e4d488cd0bc9645f306e7f5569ad042d918dc75be13107c677910160405180910390a16000610bd48361061d565b905080156109265761092682600085846110db565b60008080526020829052604081205460a01c61060d565b73ffffffffffffffffffffffffffffffffffffffff8216610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016109a4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016109a4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36109268360008461118a565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120610df990610f53565b90506000610e068361061d565b82519091505b8015610f4d57610e7f836001830381518110610e2a57610e2a6119e6565b6020026020010151600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610fc090919063ffffffff16565b507fb94b1adfafd33f45e2ba5c713871f026dc1ef0fdc3d75b4f24e954f15b9f8e6484846001840381518110610eb757610eb76119e6565b6020026020010151604051610eef92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60405180910390a18115610f2657610f26836001830381518110610f1557610f156119e6565b6020026020010151856000856110db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610e0c565b50505050565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610f8257610f82611a15565b604051908082528060200260200182016040528015610fab578160200160208202803683370190505b509150610fb9838383611437565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054808203610ff957600091505061060d565b60008080526020859052604090205460a01c8110156110a5576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018252812054905061107b857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840183611520565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b6110ae846115d2565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b604080517f7a1f1aa900000000000000000000000000000000000000000000000000000000808252600482018690526024820185905260448201849052917f1c26714c00000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918290603f5a02041015611174578260005260046000fd5b60008060648360008c87f1505050505050505050565b600561119581611694565b6000821180156111d157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156113bd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040812061120490610f53565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081209192509061123690610f53565b825181519192509060005b8281101561134357600085828151811061125d5761125d6119e6565b6020026020010151905060005b8381101561132557858181518110611284576112846119e6565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131d576112ca828c8c8c6110db565b60008682815181106112de576112de6119e6565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611325565b60010161126a565b83810361133957611339828c60008c6110db565b5050600101611241565b5060005b818110156113b7576000848281518110611363576113636119e6565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113ae576113ae8160008b8b6110db565b50600101611347565b50505050505b60018155610f4d565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054156113fb5750600061060d565b61140583836116f4565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b815160609060a083901c9081111561147b576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015611517578284600081518110611495576114956119e6565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156115155760008181526020879052604090205485518690839081106114e8576114e86119e6565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016114bd565b505b50919392505050565b60008080526020849052604090205460a01c80831061156b576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826000036115a557600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610f4d565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c90819003611621576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160009081526020849052604081205560018111156109265760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b80547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016116ee576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60008080526020839052604081205460a081901c80830361176957600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8716011690556117b1565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600060208083528351808285015260005b818110156117e9578581018301518582016040015282016117cd565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461184c57600080fd5b919050565b6000806040838503121561186457600080fd5b61186d83611828565b946020939093013593505050565b60006020828403121561188d57600080fd5b61060a82611828565b6000806000606084860312156118ab57600080fd5b6118b484611828565b92506118c260208501611828565b9150604084013590509250925092565b600080604083850312156118e557600080fd5b6118ee83611828565b91506118fc60208401611828565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561195357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611921565b50909695505050505050565b600181811c9082168061197357607f821691505b60208210810361068c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8082018082111561060d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220cadc776809523181702befb6128347b2f47f0d4e53d7ae0b9191e6574b758d4364736f6c63430008110033a2646970667358221220569d7109ea3faada53b173883a366537ba219820ed71958409595c7e95e030d564736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001b95760003560e01c80637a1f1aa911620000f5578063b74c3b301162000097578063dd62ed3e116200006e578063dd62ed3e1462000443578063f3598ad9146200048c578063fc0c546a14620004c557600080fd5b8063b74c3b3014620003dc578063bca9c3fc1462000404578063bcc3f3bd146200042c57600080fd5b8063a457c2d711620000cc578063a457c2d7146200023f578063a9059cbb1462000392578063b04807ec14620003a357600080fd5b80637a1f1aa91462000349578063938b5f32146200036057806395d89b41146200038857600080fd5b806339509351116200015f5780634d5f8b6311620001365780634d5f8b6314620002d15780635c19a95c14620002f957806370a08231146200031057600080fd5b806339509351146200023f5780633c3f3c2314620002a15780633ffbd47f14620002ba57600080fd5b806318160ddd116200019457806318160ddd146200026757806323b872dd146200027a578063313ce567146200029157600080fd5b806306fdde0314620001be5780630840605a14620001e0578063095ea7b3146200023f575b600080fd5b620001c8620004ed565b604051620001d7919062001e5e565b60405180910390f35b62000219620001f136600462001e9d565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001620001d7565b620002566200025036600462001ebd565b62000587565b6040519015158152602001620001d7565b6002545b604051908152602001620001d7565b620002566200028b36600462001eec565b620005bb565b60405160128152602001620001d7565b620002b8620002b236600462001e9d565b620005ef565b005b62000219620002cb36600462002014565b620007ea565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b620002b86200030a36600462001e9d565b6200092b565b6200026b6200032136600462001e9d565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b620002b86200035a36600462001eec565b62000a06565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b620001c862000a88565b620002566200028b36600462001ebd565b62000219620003b436600462001e9d565b60076020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b6200026b7f000000000000000000000000000000000000000000000000000000000000000081565b6200026b6200043d36600462001e9d565b62000a99565b6200026b620004543660046200207f565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b620002196200049d36600462001e9d565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b620002197f000000000000000000000000000000000000000000000000000000000000000081565b606060038054620004fe90620020bd565b80601f01602080910402602001604051908101604052809291908181526020018280546200052c90620020bd565b80156200057d5780601f1062000551576101008083540402835291602001916200057d565b820191906000526020600020905b8154815290600101906020018083116200055f57829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526006602052604090205473ffffffffffffffffffffffffffffffffffffffff166200064c576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116158015906200072b5750336000908152600660209081526040918290205482517ffc0c546a000000000000000000000000000000000000000000000000000000008152925173ffffffffffffffffffffffffffffffffffffffff918216939185169263fc0c546a92600480820193918290030181865afa158015620006ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000712919062002112565b73ffffffffffffffffffffffffffffffffffffffff1614155b1562000763576040517fb599ae3000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3360009081526007602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff851690811790915591519182527fdd367fa3b0132bc9c4680deca3d4565375dda9ed37c98f8321370efe4594785a910160405180910390a150565b6000620007f8838362000ad1565b905060008160036040516200080d9062001ddc565b73ffffffffffffffffffffffffffffffffffffffff90921682526020820152604001604051809103906000f0801580156200084c573d6000803e3d6000fd5b506040517ff2fde38b00000000000000000000000000000000000000000000000000000000815233600482015290915073ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90602401600060405180830381600087803b158015620008b857600080fd5b505af1158015620008cd573d6000803e3d6000fd5b505033600090815260076020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff949094169390931790925550909392505050565b620009368162000c38565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526007602052604090205416801562000a025773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517ff70f6a9a000000000000000000000000000000000000000000000000000000008152336004820152838316602482015291169063f70f6a9a90604401600060405180830381600087803b158015620009e857600080fd5b505af1158015620009fd573d6000803e3d6000fd5b505050505b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161462000a76576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000a8383838362000cc9565b505050565b606060048054620004fe90620020bd565b73ffffffffffffffffffffffffffffffffffffffff811660009081526020819052604081205462000acb904262000d72565b92915050565b3360009081526006602052604081205473ffffffffffffffffffffffffffffffffffffffff161562000b2f576040517f3a81d6fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82827f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060405162000b819062001dea565b62000b90949392919062002132565b604051809103906000f08015801562000bad573d6000803e3d6000fd5b503360008181526006602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff861617905590519182529192507fb2bd819aacce2076359caf6d49d9ac5252134cffdffe026bf4ad781dc3847790910160405180910390a192915050565b73ffffffffffffffffffffffffffffffffffffffff81161580159062000c83575073ffffffffffffffffffffffffffffffffffffffff81811660009081526006602052604090205416155b1562000cbb576040517fccd4942000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b62000cc681620014ea565b50565b62000a83838373ffffffffffffffffffffffffffffffffffffffff82161562000d1a5773ffffffffffffffffffffffffffffffffffffffff8087166000908152600560205260409020541662000d1d565b60005b73ffffffffffffffffffffffffffffffffffffffff86161562000d685773ffffffffffffffffffffffffffffffffffffffff8087166000908152600560205260409020541662000d6b565b60005b8562001671565b60007f0000000000000000000000000000000000000000000000000000000000000000821062000da3578162000dc5565b7f00000000000000000000000000000000000000000000000000000000000000005b91508290507f00000000000000000000000000000000000000000000000000000000000000008203600181161562000e2757670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600281161562000e6157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600481161562000e9b57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b600881161562000ed557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b601081161562000f0f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b602081161562000f4957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b604081161562000f8357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b608081161562000fbd57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b61010081161562000ff857670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6102008116156200103357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6104008116156200106e57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b610800811615620010a957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b611000811615620010e457670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6120008116156200111f57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6140008116156200115a57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6180008116156200119557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62010000811615620011d157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620200008116156200120d57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620400008116156200124957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b620800008116156200128557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62100000811615620012c157670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b62200000811615620012fd57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b624000008116156200133957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b628000008116156200137557670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6301000000811615620013b257670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6302000000811615620013ef57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63040000008116156200142c57670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b63080000008116156200146957670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6310000000811615620014a657670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b6320000000811615620014e357670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000083020491505b5092915050565b3360009081526005602052604090205473ffffffffffffffffffffffffffffffffffffffff908116908216811462000a02573360008181526005602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87169081179091558251938452908301527f4bc154dd35d6a5cb9206482ecb473cdbf2473006d6bce728b9cc0741bcc59ea2910160405180910390a16040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa15801562001638573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200165e91906200216f565b9050801562000a835762000a8333338486855b620016808585858585620017fd565b73ffffffffffffffffffffffffffffffffffffffff8316156200173b5773ffffffffffffffffffffffffffffffffffffffff838116600090815260066020526040908190205490517f9dc29fac000000000000000000000000000000000000000000000000000000008152878316600482015260248101849052911690639dc29fac90604401600060405180830381600087803b1580156200172157600080fd5b505af115801562001736573d6000803e3d6000fd5b505050505b73ffffffffffffffffffffffffffffffffffffffff821615620017f65773ffffffffffffffffffffffffffffffffffffffff828116600090815260066020526040908190205490517f40c10f190000000000000000000000000000000000000000000000000000000081528683166004820152602481018490529116906340c10f1990604401600060405180830381600087803b158015620017dc57600080fd5b505af1158015620017f1573d6000803e3d6000fd5b505050505b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156200183a5750600081115b15620017f65773ffffffffffffffffffffffffffffffffffffffff83166200186e57620018688282620018a3565b620017f6565b73ffffffffffffffffffffffffffffffffffffffff821662001896576200186883826200199e565b620017f683838362001b66565b73ffffffffffffffffffffffffffffffffffffffff821662001926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546200193a919062002189565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff821662001a43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020548181101562001afb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff831662001c0b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff821662001cb0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548181101562001d68576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016200191d565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a350505050565b611fbb80620021c583390190565b611e13806200418083390190565b6000815180845260005b8181101562001e205760208185018101518683018201520162001e02565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b60208152600062001e73602083018462001df8565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811462000cc657600080fd5b60006020828403121562001eb057600080fd5b813562001e738162001e7a565b6000806040838503121562001ed157600080fd5b823562001ede8162001e7a565b946020939093013593505050565b60008060006060848603121562001f0257600080fd5b833562001f0f8162001e7a565b9250602084013562001f218162001e7a565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011262001f7357600080fd5b813567ffffffffffffffff8082111562001f915762001f9162001f32565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171562001fda5762001fda62001f32565b8160405283815286602085880101111562001ff457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156200202857600080fd5b823567ffffffffffffffff808211156200204157600080fd5b6200204f8683870162001f61565b935060208501359150808211156200206657600080fd5b50620020758582860162001f61565b9150509250929050565b600080604083850312156200209357600080fd5b8235620020a08162001e7a565b91506020830135620020b28162001e7a565b809150509250929050565b600181811c90821680620020d257607f821691505b6020821081036200210c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b6000602082840312156200212557600080fd5b815162001e738162001e7a565b60808152600062002147608083018762001df8565b82810360208401526200215b818762001df8565b604084019590955250506060015292915050565b6000602082840312156200218257600080fd5b5051919050565b8082018082111562000acb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfe60c06040523480156200001157600080fd5b5060405162001fbb38038062001fbb8339810160408190526200003491620000f8565b6001600160a01b0382166080526200004c33620000a8565b60058111156200007657604051632c22366560e11b81526004810182905260240160405180910390fd5b6001600160a01b0382166200009e5760405163d0af4eb760e01b815260040160405180910390fd5b60a0525062000134565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156200010c57600080fd5b82516001600160a01b03811681146200012457600080fd5b6020939093015192949293505050565b60805160a051611e37620001846000396000818161023d015261056901526000818161036b015281816103ca01528181610492015281816106250152818161085601526109080152611e376000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c806378e3214f116100b2578063bfe1092811610081578063e6235ba711610066578063e6235ba714610340578063f2fde38b14610353578063fc0c546a1461036657600080fd5b8063bfe109281461030d578063cd00671b1461032b57600080fd5b806378e3214f146102955780637a1f1aa9146102a85780638da5cb5b146102bb578063b1bd3517146102fa57600080fd5b80634e71d92d116100ee5780634e71d92d1461025f57806366fa3e1e14610267578063715018a61461027a57806375619ab51461028257600080fd5b806318160ddd146101205780631e83409a146101375780632915cbec1461014c5780633717a68914610238575b600080fd5b6002545b6040519081526020015b60405180910390f35b61014a610145366004611ac6565b610393565b005b6101f061015a366004611ac6565b60408051606080820183526000808352602080840182905292840181905273ffffffffffffffffffffffffffffffffffffffff9490941684526003825292829020825193840183525464ffffffffff8116845265010000000000810463ffffffff16918401919091526901000000000000000000900476ffffffffffffffffffffffffffffffffffffffffffffff169082015290565b60408051825164ffffffffff16815260208084015163ffffffff16908201529181015176ffffffffffffffffffffffffffffffffffffffffffffff169082015260600161012e565b6101247f000000000000000000000000000000000000000000000000000000000000000081565b61014a61045b565b61014a610275366004611ac6565b61055f565b61014a61067d565b61014a610290366004611ac6565b610691565b61014a6102a3366004611ae3565b610788565b61014a6102b6366004611b0f565b61083e565b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012e565b610124610308366004611b50565b6108b8565b60015473ffffffffffffffffffffffffffffffffffffffff166102d5565b610333610994565b60405161012e9190611b89565b61014a61034e366004611be3565b6109a5565b61014a610361366004611ac6565b610aeb565b6102d57f000000000000000000000000000000000000000000000000000000000000000081565b60025490565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa158015610426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044a9190611c18565b9050610457823383610ba7565b5050565b6040517f3466a8860000000000000000000000000000000000000000000000000000000081523060048201523360248201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690633466a88690604401602060405180830381865afa1580156104ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105129190611c18565b905060006105206004610bd1565b905060005b815181101561055a5761055282828151811061054357610543611c31565b60200260200101513385610ba7565b600101610525565b505050565b610567610c3e565b7f00000000000000000000000000000000000000000000000000000000000000006105926004610cbf565b036105c9576040517f62bc61f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d4600482610cd6565b61060a576040517f4c95008300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081168252831660208201527f6bff9ddd187ef283e9c7726f406ab27bcc3719a41b6bee3585c7447183cffcec910160405180910390a150565b610685610c3e565b61068f6000610d47565b565b610699610c3e565b60015473ffffffffffffffffffffffffffffffffffffffff9081169082168190036106f0576040517f8750ee9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8084168252841660208201527fa9f739537fc57540bed0a44e33e27baa63290d865cc15f0f16cf17d38c998a4d910160405180910390a150600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60015473ffffffffffffffffffffffffffffffffffffffff1633146107d9576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610817576001546104579073ffffffffffffffffffffffffffffffffffffffff1682610dbc565b6001546104579073ffffffffffffffffffffffffffffffffffffffff848116911683610f16565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146108ad576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61055a838383610f78565b6040517f3466a88600000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015260009182917f00000000000000000000000000000000000000000000000000000000000000001690633466a88690604401602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190611c18565b905061098a838261098387611036565b9190611086565b9150505b92915050565b60606109a06004610bd1565b905090565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109f6576040517f4ca8886700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902054610a52576040517f24060f4f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610a698383610a6287611036565b91906110ae565b6040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018390529081018490529091507f6a6f77044107a33658235d41bedbbaf2fe9ccdceb313143c947a5e76e1ec84749060600160405180910390a1610ae573ffffffffffffffffffffffffffffffffffffffff8516333086611139565b50505050565b610af3610c3e565b73ffffffffffffffffffffffffffffffffffffffff8116610b9b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610ba481610d47565b50565b6000610bbe8383610bb787611036565b91906111d6565b90508015610ae557610ae5848483611222565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610c0057610c00611c60565b604051908082528060200260200182016040528015610c29578160200160208202803683370190505b509150610c37838383611243565b5050919050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b92565b60008080526020829052604081205460a01c61098e565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415610d0b5750600061098e565b610d15838361132c565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80471015610e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610b92565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610e80576040519150601f19603f3d011682016040523d82523d6000602084013e610e85565b606091505b505090508061055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610b92565b610f42837fa9059cbb0000000000000000000000000000000000000000000000000000000084846113f4565b61055a576040517ffb7f507900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f846004610bd1565b905060005b8151811015610fca57610fc2858585610fba868681518110610fad57610fad611c31565b6020026020010151611036565b929190611447565b600101610f89565b5073ffffffffffffffffffffffffffffffffffffffff8416610ffe578160026000828254610ff89190611cbe565b90915550505b73ffffffffffffffffffffffffffffffffffffffff8316610ae557816002600082825461102b9190611cd1565b909155505050505050565b604080518082018252611a9c81526000602080830182905273ffffffffffffffffffffffffffffffffffffffff851682526003815290839020835180850190945261038d8452908301529061098e565b60006110a6838361109687611467565b6020880151600101929190611489565b949350505050565b6000806110bc856020015190565b90506111256110ca86611467565b600183019064ffffffffff42167affffffffffffffffffffffffffffffffffffffffffffffffffffff90911665010000000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016179055565b6111308185856114d9565b95945050505050565b60006323b872dd60e01b905060006040518281528560048201528460248201528360448201526020600060648360008b5af19150508015611197573d801561118d57600160005114601f3d11169150611195565b6000873b1191505b505b806111ce576040517ff405907100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000806111e4856020015190565b905060006111f186611467565b905061120260018301868684611489565b925082156112195761121960018301868684611715565b50509392505050565b61055a73ffffffffffffffffffffffffffffffffffffffff84168383610f16565b815160609060a083901c90811115611287576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156113235782846000815181106112a1576112a1611c31565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156113215760008181526020879052604090205485518690839081106112f4576112f4611c31565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016112c9565b505b50919392505050565b60008080526020839052604081205460a081901c8083036113a157600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8716011690556113e9565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b60006040518481528360048201528260248201526020600060448360008a5af191505080156110a6573d801561143657600160005114601f3d1116915061143e565b6000863b1191505b50949350505050565b610ae583838361145688611467565b60208901516001019392919061174e565b600061098e826118aa6118e461147e866020015190565b600101929190611979565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600185016020526040812054670de0b6b3a7640000906114c58486611ce4565b6114cf9190611cfb565b6111309190611d51565b600081600003611515576040517f68d5686e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff821115611553576040517f426a107300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6d04ee2d6d415b85acef810000000083111561159b576040517f0625040100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051606081018252855464ffffffffff811680835265010000000000820463ffffffff166020840152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16928201929092529042101561166e57670de0b6b3a764000061162f82836020015163ffffffff1684600001516116239190611d8c565b64ffffffffff166119f9565b6116399190611d51565b816040015176ffffffffffffffffffffffffffffffffffffffffffffff166116619190611cd1565b61166b9085611cbe565b93505b6116788342611cbe565b855464ffffffffff908116690100000000000000000076ffffffffffffffffffffffffffffffffffffffffffffff8816027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff16176501000000000063ffffffff9690961695909502949094177fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001693169290921790935550919050565b61171f8183611ce4565b73ffffffffffffffffffffffffffffffffffffffff909316600090815260019094016020525050604090912055565b73ffffffffffffffffffffffffffffffffffffffff848116159084161583158015906117a657508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614155b156118a15781806117b45750805b1561180d577fffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000650100000000007affffffffffffffffffffffffffffffffffffffffffffffffffffff851602164264ffffffffff161787555b60006118198486611ce4565b90508261185d5773ffffffffffffffffffffffffffffffffffffffff8716600090815260018901602052604081208054839290611857908490611cfb565b90915550505b8161189f5773ffffffffffffffffffffffffffffffffffffffff8616600090815260018901602052604081208054839290611899908490611daa565b90915550505b505b50505050505050565b6000806118cb8360408051808201909152611a9c8152600060208201525090565b90506118dd816000015163ffffffff16565b9392505050565b6000806119058460408051808201909152611a9c8152600060208201525090565b905061098a83611916836020015190565b60408051606081018252915464ffffffffff8116835265010000000000810463ffffffff9081166020850152690100000000000000000090910476ffffffffffffffffffffffffffffffffffffffffffffff16918301919091529091906119f916565b835460009064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff164282146119ef5760006119c3878763ffffffff16565b905080156119ed57806119da88858863ffffffff16565b816119e7576119e7611d22565b04820191505b505b9695505050505050565b602082015160009063ffffffff161561098e576000611a2383856000015164ffffffffff16611a86565b611a3842866000015164ffffffffff16611a86565b039050836020015163ffffffff16670de0b6b3a7640000856040015176ffffffffffffffffffffffffffffffffffffffffffffff1683020281611a7d57611a7d611d22565b0491505061098e565b6000818310611a9557816118dd565b5090919050565b61068f611dd2565b73ffffffffffffffffffffffffffffffffffffffff81168114610ba457600080fd5b600060208284031215611ad857600080fd5b81356118dd81611aa4565b60008060408385031215611af657600080fd5b8235611b0181611aa4565b946020939093013593505050565b600080600060608486031215611b2457600080fd5b8335611b2f81611aa4565b92506020840135611b3f81611aa4565b929592945050506040919091013590565b60008060408385031215611b6357600080fd5b8235611b6e81611aa4565b91506020830135611b7e81611aa4565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611bd757835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611ba5565b50909695505050505050565b600080600060608486031215611bf857600080fd5b8335611c0381611aa4565b95602085013595506040909401359392505050565b600060208284031215611c2a57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8082018082111561098e5761098e611c8f565b8181038181111561098e5761098e611c8f565b808202811582820484141761098e5761098e611c8f565b8181036000831280158383131683831282161715611d1b57611d1b611c8f565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d87577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b64ffffffffff828116828216039080821115611d1b57611d1b611c8f565b8082018281126000831280158216821582161715611dca57611dca611c8f565b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea264697066735822122033d2e53b7d8d7fef22ac60ee554dd5c92e09220b60eab4ee92937f19f8b38d7864736f6c6343000811003360e06040523480156200001157600080fd5b5060405162001e1338038062001e13833981016040819052620000349162000178565b81818585600362000046838262000281565b50600462000055828262000281565b505050816000036200007a576040516337f1632160e11b815260040160405180910390fd5b608082905260a08190526200009c6005620000ad602090811b6200084b17901c565b50503360c052506200034d92505050565b60019055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000db57600080fd5b81516001600160401b0380821115620000f857620000f8620000b3565b604051601f8301601f19908116603f01168101908282118183101715620001235762000123620000b3565b816040528381526020925086838588010111156200014057600080fd5b600091505b8382101562000164578582018301518183018401529082019062000145565b600093810190920192909252949350505050565b600080600080608085870312156200018f57600080fd5b84516001600160401b0380821115620001a757600080fd5b620001b588838901620000c9565b95506020870151915080821115620001cc57600080fd5b50620001db87828801620000c9565b604087015160609097015195989097509350505050565b600181811c908216806200020757607f821691505b6020821081036200022857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200027c57600081815260208120601f850160051c81016020861015620002575750805b601f850160051c820191505b81811015620002785782815560010162000263565b5050505b505050565b81516001600160401b038111156200029d576200029d620000b3565b620002b581620002ae8454620001f2565b846200022e565b602080601f831160018114620002ed5760008415620002d45750858301515b600019600386901b1c1916600185901b17855562000278565b600085815260208120601f198616915b828110156200031e57888601518255948401946001909101908401620002fd565b50858210156200033d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c051611a7a62000399600039600081816105760152818161072701526107dc015260008181610318015261113d01526000818161029d0152610b180152611a7a6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806370a08231116100e3578063a457c2d71161008c578063dd62ed3e11610066578063dd62ed3e14610350578063f55f545c14610396578063f70f6a9a146103b657600080fd5b8063a457c2d7146101bb578063a9059cbb1461033a578063ada6f64b1461034857600080fd5b806395d89b41116100bd57806395d89b41146102f85780639dc29fac14610300578063a44282dc1461031357600080fd5b806370a08231146102bf5780637a3e60e9146102d25780638da031df146102e557600080fd5b80633466a8861161014557806340f99a941161011f57806340f99a941461024d578063538db9231461028557806366b0dede1461029857600080fd5b80633466a8861461022757806339509351146101bb57806340c10f191461023a57600080fd5b8063222d6b4d11610176578063222d6b4d146101f057806323b872dd14610205578063313ce5671461021857600080fd5b806306fdde031461019d578063095ea7b3146101bb57806318160ddd146101de575b600080fd5b6101a56103c9565b6040516101b291906117bc565b60405180910390f35b6101ce6101c9366004611851565b61045b565b60405190151581526020016101b2565b6002545b6040519081526020016101b2565b6102036101fe36600461187b565b61048f565b005b6101ce610213366004611896565b61049c565b604051601281526020016101b2565b6101e26102353660046118d2565b6104d0565b610203610248366004611851565b61055e565b61026061025b366004611851565b6105db565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b2565b61020361029336600461187b565b610613565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b6101e26102cd36600461187b565b61061d565b6101e26102e036600461187b565b610692565b6101ce6102f33660046118d2565b6106c0565b6101a5610700565b61020361030e366004611851565b61070f565b6101e27f000000000000000000000000000000000000000000000000000000000000000081565b6101ce610213366004611851565b610203610788565b6101e261035e3660046118d2565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b6103a96103a436600461187b565b610793565b6040516101b29190611905565b6102036103c43660046118d2565b6107c4565b6060600380546103d89061195f565b80601f01602080910402602001604051908101604052809291908181526020018280546104049061195f565b80156104515780601f1061042657610100808354040283529160200191610451565b820191906000526020600020905b81548152906001019060200180831161043457829003601f168201915b5050505050905090565b60006040517feb60c2c400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104993382610851565b50565b60006040517fa24e573d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060056104df815460021490565b15610516576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61052083856106c0565b156105525773ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020549150610557565b600091505b5092915050565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146105cd576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d7828261092b565b5050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040812061060a9083610a2b565b90505b92915050565b6104993382610a3f565b6000600561062c815460021490565b15610663576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205491505b50919050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812061060d90610be9565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260066020908152604080832093851683526001909301905290812054151561060a565b6060600480546103d89061195f565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461077e576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d78282610c00565b61079133610dcb565b565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040902060609061060d90610f53565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610833576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61083d82826106c0565b6105d7576105d78282610a3f565b60019055565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090206108809082610fc0565b6108b6576040517f826fbca300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8085168252831660208201527fb94b1adfafd33f45e2ba5c713871f026dc1ef0fdc3d75b4f24e954f15b9f8e64910160405180910390a160006109118361061d565b905080156109265761092682846000846110db565b505050565b73ffffffffffffffffffffffffffffffffffffffff82166109ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064015b60405180910390fd5b80600260008282546109bf91906119ac565b909155505073ffffffffffffffffffffffffffffffffffffffff8216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36105d76000838361118a565b60008181526020839052604081205461060a565b73ffffffffffffffffffffffffffffffffffffffff8116610a8c576040517f960357e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152600660205260409020610abb90826113c6565b610af1576040517fcbdb297300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090207f000000000000000000000000000000000000000000000000000000000000000090610b4190610be9565b1115610b79576040517fc87e91a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8085168252831660208201527fde03e097fdd335e4d488cd0bc9645f306e7f5569ad042d918dc75be13107c677910160405180910390a16000610bd48361061d565b905080156109265761092682600085846110db565b60008080526020829052604081205460a01c61060d565b73ffffffffffffffffffffffffffffffffffffffff8216610ca3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016109a4565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090205481811015610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f636500000000000000000000000000000000000000000000000000000000000060648201526084016109a4565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36109268360008461118a565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660205260408120610df990610f53565b90506000610e068361061d565b82519091505b8015610f4d57610e7f836001830381518110610e2a57610e2a6119e6565b6020026020010151600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020610fc090919063ffffffff16565b507fb94b1adfafd33f45e2ba5c713871f026dc1ef0fdc3d75b4f24e954f15b9f8e6484846001840381518110610eb757610eb76119e6565b6020026020010151604051610eef92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b60405180910390a18115610f2657610f26836001830381518110610f1557610f156119e6565b6020026020010151856000856110db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610e0c565b50505050565b60008080526020829052604090205460609060a081901c67ffffffffffffffff811115610f8257610f82611a15565b604051908082528060200260200182016040528015610fab578160200160208202803683370190505b509150610fb9838383611437565b5050919050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054808203610ff957600091505061060d565b60008080526020859052604090205460a01c8110156110a5576000808052602085905260408082205460a01c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018252812054905061107b857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff840183611520565b73ffffffffffffffffffffffffffffffffffffffff16600090815260018501602052604090208190555b6110ae846115d2565b505073ffffffffffffffffffffffffffffffffffffffff1660009081526001918201602052604081205590565b604080517f7a1f1aa900000000000000000000000000000000000000000000000000000000808252600482018690526024820185905260448201849052917f1c26714c00000000000000000000000000000000000000000000000000000000917f0000000000000000000000000000000000000000000000000000000000000000918290603f5a02041015611174578260005260046000fd5b60008060648360008c87f1505050505050505050565b600561119581611694565b6000821180156111d157508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b156113bd5773ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040812061120490610f53565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602052604081209192509061123690610f53565b825181519192509060005b8281101561134357600085828151811061125d5761125d6119e6565b6020026020010151905060005b8381101561132557858181518110611284576112846119e6565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361131d576112ca828c8c8c6110db565b60008682815181106112de576112de6119e6565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611325565b60010161126a565b83810361133957611339828c60008c6110db565b5050600101611241565b5060005b818110156113b7576000848281518110611363576113636119e6565b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146113ae576113ae8160008b8b6110db565b50600101611347565b50505050505b60018155610f4d565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600183016020526040812054156113fb5750600061060d565b61140583836116f4565b73ffffffffffffffffffffffffffffffffffffffff929092166000908152600193840160205260409020919091555090565b815160609060a083901c9081111561147b576040517ff9a99b2500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015611517578284600081518110611495576114956119e6565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015260015b818110156115155760008181526020879052604090205485518690839081106114e8576114e86119e6565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016114bd565b505b50919392505050565b60008080526020849052604090205460a01c80831061156b576040517f4e23d03500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826000036115a557600080805260208590526040902060a082901b73ffffffffffffffffffffffffffffffffffffffff8416179055610f4d565b600083815260208590526040902073ffffffffffffffffffffffffffffffffffffffff8316905550505050565b6000808052602082905260408120549060a082901c90819003611621576040517f06a2af9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810160009081526020849052604081205560018111156109265760008080526020849052604090207fffffffffffffffffffffffff000000000000000000000000000000000000000083019055505050565b80547ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016116ee576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60029055565b60008080526020839052604081205460a081901c80830361176957600080805260208690526040902074ffffffffffffffffffffffffffffffffffffffffff7401000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8716011690556117b1565b6000808052602086905260408082207401000000000000000000000000000000000000000085019055828252902073ffffffffffffffffffffffffffffffffffffffff851690555b600101949350505050565b600060208083528351808285015260005b818110156117e9578581018301518582016040015282016117cd565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461184c57600080fd5b919050565b6000806040838503121561186457600080fd5b61186d83611828565b946020939093013593505050565b60006020828403121561188d57600080fd5b61060a82611828565b6000806000606084860312156118ab57600080fd5b6118b484611828565b92506118c260208501611828565b9150604084013590509250925092565b600080604083850312156118e557600080fd5b6118ee83611828565b91506118fc60208401611828565b90509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561195357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611921565b50909695505050505050565b600181811c9082168061197357607f821691505b60208210810361068c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b8082018082111561060d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea2646970667358221220cadc776809523181702befb6128347b2f47f0d4e53d7ae0b9191e6574b758d4364736f6c63430008110033a2646970667358221220569d7109ea3faada53b173883a366537ba219820ed71958409595c7e95e030d564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "votingPowerOf(address)": {
        "details": "we assume that voting power is a function of balance that preserves order"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9349,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9355,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9357,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 9359,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 9361,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 204,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "delegated",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 653,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "registration",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_contract(IDelegatedShare)879)"
      },
      {
        "astId": 480,
        "contract": "contracts/PowerPod.sol:PowerPod",
        "label": "defaultFarms",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDelegatedShare)879": {
        "encoding": "inplace",
        "label": "contract IDelegatedShare",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(IDelegatedShare)879)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IDelegatedShare)",
        "numberOfBytes": "32",
        "value": "t_contract(IDelegatedShare)879"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}